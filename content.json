{"pages":[],"posts":[{"title":"블로그 시작","text":"드디어 Jekyll과 Github-pages를 이용한 블로깅 시작! 이런저런 일들과 핑계들이 모여 계획보다 훨씬 늦어졌지만, 그래도 일단 “시작이 반!”이라는 말로 위안을 얻어본다.’","link":"/2018/07/08/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%8B%9C%EC%9E%91/"},{"title":"URL 구조","text":"URL(Uniform Resource Locator)인터넷 상에서 자원의 위치와 종류를 나타내는 일련의 규칙 구조Protocol자원에 접근하는 방법. HTTP, HTTPS, FTP, SSH 등 [https://] copyx.github.io:80/blog/post?pNum=1253#Top Host(Domain)요청한 서버의 이름. IP 주소로 직접 접근이 가능하지만 불편해서 사용 https:// [copyx.github.io] :80/blog/post?pNum=1253#Top Port웹서버의 자원에 접근하기위한 문. 유명한 프로토콜에 예약된 번호도 있음 https:// copyx.github.io [:80] /blog/post?pNum=1253#Top Path서버의 어디에 있는지 알려주는 경로 https:// copyx.github.io:80 [/blog/post] ?pNum=1253#Top Query string웹서버에 전달되는 추가적인 인자들 https:// copyx.github.io:80/blog/post [?pNum=1253]#Top Anchor자원 내 특정 부분을 가르키는 부분 https:// copyx.github.io:80/blog/post [?pNum=1253]#Top","link":"/2018/07/09/URL-%EA%B5%AC%EC%A1%B0/"},{"title":"Program의 의미","text":"컴퓨터가 나오기 전진행 계획이나 순서. 예) 연주 순서, 연극 진행 순서, 교육 프로그램 등 컴퓨터가 나온 후어떤 문제를 해결하기위해 묶여서 실행되는 명령의 집합체. 어떤 행동이나, 행동의 순서 등을 나열한 것이라는 의미는 변하지 않았음.","link":"/2018/07/11/Program%EC%9D%98-%EC%9D%98%EB%AF%B8/"},{"title":"&quot;동기적&quot; 이라는 단어의 의미","text":"동기적 = 動機的 움직일 ‘동’, 틀 ‘기’ 해석하자면 틀대로, 정해진대로 움직인다는 의미. 우리가 작성한 코드의 순서대로 움직인다는 의미를 내포하고 있다. 비동기적이라는 것은 반대로 작성한 틀대로 움직이지 않는 것이므로, 코드에 작성된 명령의 순서대로 실행되지 않는 것.","link":"/2018/07/16/%EB%8F%99%EA%B8%B0%EC%A0%81-%EC%9D%B4%EB%9D%BC%EB%8A%94-%EB%8B%A8%EC%96%B4%EC%9D%98-%EC%9D%98%EB%AF%B8/"},{"title":"SBT 프로젝트에 Dependency(의존성) 추가하기","text":"회사 프로젝트에서 데이터 분석을 위해 Spark[^1]를 사용하게 됐다. “Learning Spark” 책으로 공부하고 있던 중, Scala App. 에 Spark 라이브러리를 추가해 사용해야하는 예제가 있었다. Spark, Scala, SBT[^2] 모두 처음이라 SBT 프로젝트에 의존성 추가 방법이 필요해 포스팅을 통해 기록한다. [^1]: 아파치에서 관리하는 오픈소스 데이터 분석 프레임워크이자 플랫폼.[^2]: Scala Build Tool. 이름은 보면 스칼라를 위한 것 같지만 사실 다른 언어들에도 범용적으로 사용할 수 있는 빌드 도구. build.sbt 파일 수정SBT는 Apache Ivy 를 이용해 의존성을 관리한다. 아래는 build.sbt 파일로 프로젝트 루트 디렉토리에 위치한 빌드 셋팅 정보가 담긴 파일이다. 123456789name := &quot;learning_spark&quot;version := &quot;0.1&quot;scalaVersion := &quot;2.12.6&quot;// 위는 IntelliJ 에 의해 자동 생성// 아래는 의존성 추가libraryDependencies += &quot;org.apache.spark&quot; % &quot;spark-core_2.11&quot; % &quot;2.3.1&quot; 보는바와 같이 Spark Core 라이브러리에 대한 의존성이 추가돼있다. 의존성 추가 방법은 다음처럼 libraryDependencies 키에 해당 라이브러리의 정보를 형식에 맞게 추가한다. 1libraryDependencies += groupID % artifactID % revision or 1libraryDependencies += groupID % artifactID % revision % configuration","link":"/2018/08/19/SBT-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-Dependency(%EC%9D%98%EC%A1%B4%EC%84%B1)-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/"},{"title":"자바스크립트 Primitive Type과 Reference Type의 차이","text":"자바스크립트에는 Primitive Type과 Reference Type의 변수형이 있다. Primitive Type Number String Boolean null undefined Symbol(ES6에서 추가됨) Reference Type Object Array Function RegExp Weak Maps, Maps, Sets 등(ES6에서 추가됨) 변수와 메모리Primitive Type과 Reference Type은 데이터를 메모리에 저장하고 접근하는 방식에 차이가 있다. Primitive Type변수와 연결된 메모리 공간에 값이 바로 들어있음. 12let a = 1;// [a] =&gt; [@514: 1] a라는 변수에 1을 저장하면, a는 1을 저장할 수 있는 메모리공간을 할당받고(여기서는 514번지), 메모리의 514번지에는 1이라는 값이 저장된다. Reference Type변수와 연결된 메모리 공간에 값이 아닌 객체의 주소가 있어서 이를 참조해 접근함. 1234let o = { a: 1,};// [o] =&gt; [@515:@1018] =&gt; [@1018: { a: @2034 }] =&gt; [@2034: 1] 위 코드는 a라는 프로퍼티를 가진 객체를 변수 o에 할당하는 코드다. 메모리 구조상으로 보면 변수 o에 할당된 515번지에는 해당 객체가 바로 들어있지 않고, 객체가 저장된 메모리공간의 주소인 1018번지가 저장된다. 따라서 변수 p를 새로 만들어서 p = o 로 할당을 해도 객체가 복사되는 것이 아닌, 객체가 저장된 주소값이 복사된다.","link":"/2018/08/07/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-Primitive-type%EA%B3%BC-Reference-type%EC%9D%98-%EC%B0%A8%EC%9D%B4/"},{"title":"Entity(개체)와 Value Object(값 객체)","text":"회사에서 개발하던 중 동료에게 VO 라는 용어를 듣게됐다. (사실 오래전에 듣고 포스트를 정리했으나 까먹고 안올림;;) 이에 대해 찾다보니 VO 와 Entity 가 함께 나오는 경우가 많아서 이를 정리했다. 식별성을 가지는 객체 : EntityDB 에 어떤 사람의 정보를 저장할 때, 이 사람은 ID 로 식별한다. 이 때, 다양한 속성의 값들이 변할 수 있지만 ID 를 통해 이 사람을 식별 할 수 있다. 속성이 변경되도 해당 객체가 맞는지 판단할 수 있는 기준이 존재하는 객체를 엔터티라고 하며, 엔터티는 속성이 바뀔 수 있기 때문에 가변(mutable) 객체다. 예) 김엑스라는 사람의 나이, 주소, 직업 등의 속성은 변경될 수 있지만, 이 사람이 김엑스 라는 것은 동일하다. 식별성이 없는 객체 : Value Object따로 식별자가 없으며, 속성값이 변하면 다른 객체로 인식된다. 두 객체의 모든 필드값이 같으면 같은 객체라고 보며, 속성이 바뀌면 다른 객체가 되는 것이기 때문에 불변(immutable) 객체다. 예) 두 개의 좌표 객체. 위도, 경도만 같으면 같은 위치를 가르키는 같은 VO 라고 할 수 있다. 크레파스로 그린 그림크레파스로 도화지 위에 그림을 그렸다고 가정하자. 우리는 관점에 따라 이 크레파스로 그은 선들을 엔터티, 값 객체 두 가지 모두로 볼 수 있다. 이 선들을 값 객체로 보면 브랜드, 색, 두께, 길이, 모양 등의 속성을 가질 수 있으며, 이 속성들이 같으면 값 객체로서 같은 크레파스 선 객체로 인식할 수 있다. 그러나 이 선들을 볼 때 누구의 선인지 구분하는 관점에서는 같은 색, 브랜드의 크레파스 선이라도 서로 다른 객체로 인식될 수 있다. 이는 보는 사람, 설계자의 관점에 따라 객체의 구분이 달라짐을 의미하며, 설계자가 설계하는 앱의 목적과 용도에 따라 달라질 수 있다. 참고 블로그 Entity와 Value Object - Spring MVC linxism :: 객체(Object)와 개체(Entity) 엔티티(Entity)와 값 객체(Value Object)의 차이 - 어쩌다 프로그래머 DDD - 엔티티, VO, 서비스","link":"/2018/11/03/Entity-%EC%99%80-Value-Object/"},{"title":".io 도메인","text":"영국령 인도양 지역 (British Indian Ocean Territory) 의 인터넷 국가 코드 최상위 도메인 (난 또 input/output 인줄…) 요즘에는 다양한 스타트업들이 .io 를 도메인에 이용하는데 그 이유는 다음과 같다고 한다. 일반적인 TLD(Top Level Domain, 최상위 도메인)와 비교해 유니크하다. 마케팅 측면에서 스타트업이 눈에 띄는데 도움이 될 수 있다. 세 글자의 일반적인 TLD 들 보다 짧고 달라서 기억하기 쉽게 만들어준다. .io 는 막 유명해지기 시작해서 원하는 도메인을 얻을 가능성이 꽤 있다. 기술과 소프트웨어 개발의 세계에서 I/O 는 Input/Output 을 의미한다. 그래서 .IO 는 그쪽 사람들과 특히 관련이 있다. scenar.IO 나 pistach.IO 같은 멋진 도메인을 만들 수 있다. 원문 보러가기 출처 .io - Wikipedia Why are startups turning to .IO? - Name.com Blog","link":"/2018/11/18/io-%EB%8F%84%EB%A9%94%EC%9D%B8/"},{"title":"POJO","text":"Plain Old Java Object Java EE 등의 중량 프레임워크들을 사용하게 되면서, 이에 종속된 무거운 객체를 만들게 된 것에 반발해서 사용하게 된 용어라고 한다. 2000년 9월에 마틴 파울러, 레베카 파슨, 조쉬 맥킨지 등이 사용하기 시작한 용어로 그 기원을 밝히는 내용이 재밌다. “우리는 사람들이 자기네 시스템에 보통의 객체를 사용하는 것을 왜 그렇게 반대하는지 궁금하였는데, 간단한 객체는 폼 나는 명칭이 없기 때문에 그랬던 것이라고 결론지었다. 그래서 적당한 이름을 하나 만들어 붙였더니, 아 글쎄, 다들 좋아하더라고.” - 마틴 파울러 원문 보러가기 용어를 쓰기 시작한 이후, 주로 특정 자바 모델이나 기능, 프레임워크 등을 따르지 않은 자바 오브젝트를 지칭하는 말로 사용됐다. 출처 Plain Old Java Object - 위키백과","link":"/2018/11/07/POJO/"},{"title":"고객과 문제와 해결책","text":"스타트업에게 필요한 건 비즈니스모델 캔버스가 아니라 ‘서바이벌 캔버스’ - Venture Square 위 글을 읽으며 마음에 와닿는 문구만 정리했습니다. 고객에 대해 우리가 누구를 위해서 일해야 하는지를 생각하게\b됐다. 고객은 설득의 대상이 아니라 배움의 대상이다. 초기 고객은 고객이기 이전에 나와 같이 서비스를 만드는 사람이다. 낯선 해결책 찾기 스타트업은 뻔하지 않아야 하지만 과하지도 않아야 한다. 문제를 찾으려면 고객을 관찰해야하고, 해결책을 찾으려면 기존 해결책을 뜯어봐야한다.","link":"/2018/11/23/%EA%B3%A0%EA%B0%9D%EA%B3%BC-%EB%AC%B8%EC%A0%9C%EC%99%80-%ED%95%B4%EA%B2%B0%EC%B1%85/"},{"title":"Boilerplate Code","text":"재사용 가능한 코드 수정하지 않거나 최소한의 수정을 거쳐 여러 곳에 필수적으로 사용되는 코드 다른 여러 곳에서 반복적으로 인용되는 코드 우리가 알고있는 클래스 변수에 대한 Getter/Setter, C/C++ 의 Include guard 등이 있다. 이를 피하는 방법으로 메타 프로그래밍, CoC(Convention over Configuration), 모델 기반 엔지니어링 등을 사용할 수 있다. 참조 [텀즈] boilerplate ; 보일러 플레이트 상용구 코드 - 위키백과","link":"/2018/12/02/Boilerplate-Code/"},{"title":"장모님 쇼핑몰 이미지 백업 도전기","text":"쇼핑몰이 왜 이러지저희 장모님께서는 오래전부터 쇼핑몰을 만들어주는 정부지원사업(제작부터 운영까지 정부에서 지정한 업체가 대행)을 통해 화분 도자기 쇼핑몰 운영해오셨습니다. 그런데 얼마전부터 웹사이트 접속이 일시적으로 안되며 서버가 불안정한 모습을 보였다고 하셨습니다. 장모님께서 담당 부서에 연락해보니 정부지원이 끝나서 웹사이트의 호스팅이 종료될 예정이라는 통보를 받으셨습니다. 말하는 바를 모두 이해할 수 없었지만, 그 과정에서 관리부실이든 인프라축소든 어떤 이유로 인해 서버가 불안정해진 것 같다고 말씀하셨죠. 그래서 장모님은 카페24로 이전을 결정하셨습니다. 회원정보는 관리페이지에서 엑셀파일로 백업. 그러나 이미 업로드한 만개가 넘는 상품 이미지들은 일괄 다운로드 기능이 없어서 틈틈이 수동으로 저장하고 계셨습니다. 이 이야기를 우연히 듣게된 저는 도와드리기로 마음먹었습니다. 이미지 크롤링을 해보자도구는 파이썬 기반의 사용해본 경험이 있는 Scrapy로 결정했습니다. 크롤링 대상 URI 분석 및 요청 코드 작성먼저 크롤링할 페이지의 URI 와 페이지에서 추출할 데이터의 Path(xpath 형식이든 css 형식이든) 두 가지 정보가 필요합니다. 제가 크롤링할 상품별 이미지들은 각 상품들의 상세페이지에 있었으며, 그 페이지의 URI 는 다음과 같았습니다. (사생활 보호를 위해 실제 도메인이 아닌 가상의 도메인을 넣었습니다.) http://www.jangmodojagi.co.kr/goods/content.asp?guid=1234 맨 마지막의 guid 값만 원하는 상품의 guid로 바꿔주면 해당 상품의 상세페이지에 접근이 가능했습니다. 상품들의 guid 리스트는 관리 페이지 기능을 이용해 파일로 저장했으며, 이를 읽어와 페이지에 접근할 수 있도록 코드를 작성했습니다. 123456789101112main_url = 'http://www.jangmodojagi.co.kr'goods_info_uri = '/goods/content.asp?guid='def start_requests(self): guids = open('guids', 'r') urls = [] for guid in guids: urls.append(self.main_url + self.goods_info_uri + guid.strip()) for url in urls: yield scrapy.Request(url=url, callback=self.parse) 페이지 분석 및 이미지 URI 데이터 추출 코드 작성페이지에서 원하는 데이터만 추출하기 위해서는 패스가 필요합니다. 저는 개인적으로 익숙한 xpath 형식의 패스를 사용했습니다. 패스를 찾을 때는 코드를 수정하고 실행하는 것보다 scrapy shell 명령이 더 간단합니다. 1234567891011121314151617181920212223$ scrapy shell &quot;http://www.jangmodojagi.co.kr/goods/content.asp?guid=1234&quot;2018-12-02 20:44:25 [scrapy.utils.log] INFO: Scrapy 1.5.1 started (bot: image_crawler)2018-12-02 20:44:25 [scrapy.utils.log] INFO: Versions: lxml 4.2.5.0, libxml2 2.9.4, cssselect 1.0.3, parsel 1.5.0, w3lib 1.19.0, Twisted 18.7.0, Python 3.4.2 (default, Sep 12 2018, 11:34:10) - [GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)], pyOpenSSL 18.0.0 (OpenSSL 1.1.0i 14 Aug 2018), cryptography 2.3.1, Platform Darwin-18.2.0-x86_64-i386-64bit...중략...2018-12-02 20:44:30 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://www.jangmodojagi.co.kr/main/main_real.asp&gt; (referer: None) ['partial'][s] Available Scrapy objects:[s] scrapy scrapy module (contains scrapy.Request, scrapy.Selector, etc)[s] crawler &lt;scrapy.crawler.Crawler object at 0x10b7c8da0&gt;[s] item {}[s] request &lt;GET http://www.jangmodojagi.co.kr&gt;[s] response &lt;200 http://www.jangmodojagi.co.kr/main/main_real.asp&gt;[s] settings &lt;scrapy.settings.Settings object at 0x10b7c8e48&gt;[s] spider &lt;DefaultSpider 'default' at 0x10d25f048&gt;[s] Useful shortcuts:[s] fetch(url[, redirect=True]) Fetch URL and update local objects (by default, redirects are followed)[s] fetch(req) Fetch a scrapy.Request and update local objects[s] shelp() Shell help (print this help)[s] view(response) View response in a browser&gt;&gt;&gt; response.xpath(&quot;//any/tag/of/path&quot;).extract() 위와 같이 페이지는 한 번만 요청한 상태에서 반복적으로 패스를 변경하며 확인할 수 있어서 훨씬 효과적으로 실험 할 수 있습니다. 이를 통해 상품 이미지들의 URI 를 추출하는 코드를 작성했습니다. 1234567def parse(self, response): hxs = Selector(response) guid = response.url.split('=')[1]; image_uris = hxs.xpath(&quot;//table[@id='tbContent']//img/@src&quot;).extract() print(guid, '\\n', image_uris) 이미지 파일 저장추출된 URI 는 절대경로가 아닌 상대경로 방식이어서 도메인과 결합해 사용했으며, 이미지를 가져와 저장하는 라이브러리는 urllib 를 사용했습니다. 1234567for image_uri in image_uris: image_name = guid + '_' + image_uri.split('/')[-1] image_url = self.main_url + image_uri print(image_name, image_url) urllib.request.urlretrieve(image_url, '/Users/copyx/PycharmProjects/image_crawler/image_crawler/images/' + image_name) 장모님을 위한 크롤러 완성scrapy crawl 명령을 이용해 스파이더를 실행해보니 잘 돌아갑니다. :) 추가적으로, 크롤링 속도를 적당히 느리게 하기 위해 settings.py 파일에서 몇 가지 옵션을 변경했습니다. 12# CONCURRENT_REQUESTS = 5 # 주석처리함DOWNLOAD_DELAY = 1 # 다운로드 간격 설정 더 생각해볼 부분 urllib.request.urlretrieve 는 왜 절대 경로만 통하는 것일까? pipelines.py, middlewares.py 파일의 자세한 기능 글쓰다 알게된 다른 방법 Scrapy Images Pipeline 굳이 urllib 안쓰고 스크래피의 item 과 pipeline 사용하는 방법이 있음…삽질했다… 참고 Scrapy Tutorial - Scrapy 1.5.1 documentation python - Scrapy is not able to download the images from a URL - Stack Overflow","link":"/2018/12/02/%EC%9E%A5%EB%AA%A8%EB%8B%98_%EC%87%BC%ED%95%91%EB%AA%B0_%EC%9D%B4%EB%AF%B8%EC%A7%80_%EB%B0%B1%EC%97%85_%EB%8F%84%EC%A0%84%EA%B8%B0/"},{"title":"\\&#39;내가 편한 글\\&#39;을 써보기로 마음먹었다.","text":"어제 블로그에 다시 글을 쓰기로 마음먹었다. 바쁘고 귀찮다는 핑계가 있었지만, 그래도 뭐라도 써보기로 했다. 안 그러면 내 생각도 지식도 아무것도 남지 않을 것 같았다. 다시 시작하며 예전 글들을 읽어보니 어투가 어색하게 느껴졌다. 아주 공손한 어투의 존댓말. 이 이야기를 우연히 듣게 된 저는 도와드리기로 마음먹었습니다. 글을 읽는 누군가의 기분이 걱정돼 존댓말을 하는 것처럼 느껴졌다. 존댓말이 나쁜 것은 아니지만, 글을 쓴 나조차도 어색하고 불편하게 느껴졌다. 내가 아닌 남을 위해 쓰는 글처럼 보였다. 그래서 이번에는 내가 편한 글을 써보기로 했다. 정확하게 무엇이 편한 글인지는 모르겠지만, 일단 어투부터 편하게 바꾸는 것으로.","link":"/2019/07/09/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%90%ED%88%AC/"},{"title":"Docker를 이용한 Jekyll 환경 구축","text":"Jekyll과 Github Pages를 이용한 블로그를 쓰며 가장 불편한 점은 Jekyll 환경을 로컬에 구축하는 것이었다. 나는 Ruby와 친하지 않다. 그래서 Ruby 기반의 Jekyll 환경 구축 중 삽질을 하며 원치않는 파일들이 많이 생겼고, 지운디고 지웠지만 어딘가에 남아있는 것 같아서 찝찝하다. 이런 경험을 거친 후, 우연히 Jekyll 블로그 docker로 한방에 올리기 포스트를 읽었다. 써보니 너무 편하고, 깔끔하고, 기분이 좋아서 ‘해당 내용’ + ‘쓰면서 든 생각’을 정리해둔다. Jekyll 컨테이너 만들기먼저 Github의 블로그 저장소를 클론하고 해당 디렉토리로 이동한다. 12git clone git@github.com:[your-id]/[your-id].github.io.gitcd [your-id].github.io 다음은 Jekyll 컨테이너를 만들며 Bash 명령을 실행시킨다. 1docker container run --name blog --volume=&quot;$PWD:/srv/jekyll&quot; -p 4000:4000 -it jekyll/jekyll bash 컨테이너가 생성되고 Bash Shell에 연결되면 Jekyll을 실행시킨다. 1jekyll serve --watch 그리고 http://localhost:4000에 접속하면 로컬환경에서 빌드된 내 블로그를 볼 수 있다. Jekyll이 아닌 Bash를 실행시킨 이유Jekyll의 --watch 옵션을 통해 변경사항들을 자동적용 시킬 수 있지만, _config.yml 같은 일부 파일들은 주시 대상에서 제외된다. 제외된 파일들의 수정사항을 적용하려면 Jekyll을 재실행해야한다. 1docker container run --name blog --volume=&quot;$PWD:/srv/jekyll&quot; -p 4000:4000 -it jekyll/jekyll jekyll serve --watch 위와 같이 컨테이너를 생성하면 바로 Jekyll이 실행되며, 참고한 블로그에서도 이를 사용하고 있다. 하지만 Jekyll을 재실행하려면 컨테이너를 재시작해야한다. 나는 좀 더 가볍게 Jekyll만 재실행하고싶어서 컨테이너에서 Bash를 실행시키는 방식을 선택했다. 컨테이너 재시작 및 연결 방법12docker restart blogdocker attach blog 위 명령으로 연결 후 Jekyll 관련 명령을 실행시키면 된다. 참고Jekyll 블로그 docker로 한방에 올리기","link":"/2019/07/10/%EB%8F%84%EC%BB%A4%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-jekyll-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95/"},{"title":"Minimal Mistakes 테마에서 Favicon 변경하기","text":"블로그 테마 변경 후 Favicon이 없는게 허전해서 Favicon도 바꿔보기로 했다. Favicon 생성 사이트Favicon 생성 사이트들은 규격에 맞는 이미지 파일들을 만들어주고, 이를 추가하는데 필요한 코드까지 생성해줘서 편리하다. favicon.io텍스트, 이모지, 이미지를 간편하게 Favicon으로 만들 수 있다. Favicon Generator For Real다양한 플랫폼과 브라우저를 커버하는 Favicon들을 만들 수 있다. Browsers Chrome, Safari, Firefox, Explorer, Edge Platforms Android, iOS, Windows, MacOS X Favicon 적용 방법먼저 Favicon 이미지 파일들을 assets 디렉토리 안에 위치시킨다. 그 다음, Favicon 적용 코드를 추가하면 끝이다. 보통 _includes/head.html에 Favicon 코드를 추가하지만, 테마에 따라 다른 곳에 추가하는 경우도 있다. 지금 내가 쓰는 **’Minimal Mistakes’**는 _includes/head/custom.html에 추가해야한다. 12345&lt;!-- start custom head snippets --&gt;&lt;!-- insert favicons. use https://realfavicongenerator.net/ --&gt;&lt;!-- end custom head snippets --&gt; 초기 파일에는 위와 같이 주석만 있다. 주석에 안내된대로 Favicon 코드를 추가하면 된다. 12345678910111213141516171819202122&lt;!-- start custom head snippets --&gt;&lt;!-- insert favicons. use https://realfavicongenerator.net/ --&gt;&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/assets/img/favicon/apple-touch-icon.png&quot;/&gt;&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;32x32&quot; href=&quot;/assets/img/favicon/favicon-32x32.png&quot;/&gt;&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;16x16&quot; href=&quot;/assets/img/favicon/favicon-16x16.png&quot;/&gt;&lt;link rel=&quot;manifest&quot; href=&quot;/assets/img/favicon/site.webmanifest&quot; /&gt;&lt;!-- end custom head snippets --&gt; ⚠️주의해야할 점Jekyll에서 프로젝트 디렉토리를 /(root)로 인식한다. 이미지 파일의 경로 입력 시 assets가 아닌 /를 기준으로 넣어줘야한다. 12⭕️ /assets/img/favicon/favicon-32x32.png❌ /img/favicon/favicon-32x32.png 참고 How to add a favicon to your jekyll site - Matt Zhou - Medium How do we change the favicon in the title bar? · Issue #585 · mmistakes/minimal-mistakes","link":"/2019/07/13/Mnimal-Mistakes-%ED%85%8C%EB%A7%88%EC%97%90%EC%84%9C-Favicon-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/"},{"title":"생존 안드로이드 1일차 - 뷰와 뷰그룹","text":"내가 살기위해 안드로이드 공부를 시작한다! 뷰와 뷰그룹 뷰 = 눈에 보이는 화면의 구성 요소들 뷰그룹 = 여러 개의 뷰를 담을 수 있는 그룹 뷰그룹은 뷰를 상속. 이거슨 컴포지트 패턴!상속관계를 통해 부모 요소의 속성을 자식도 사용 가능 위젯 = 일반적인 컨트롤의 역할을 하는 뷰 레이아웃 = 내부 뷰들을 배치하는 역할을 하는 뷰그룹 뷰의 크기 속성모든 뷰는 화면에서 차지하는지 크기를 알아야하므로 크기 속성(layout_width, layout_height)을 필수적으로 가져야함 1234&lt;TextView속성Prefix:속성명=&quot;속성값1&quot;android:layout_width=&quot;wrap_content&quot;/&gt; 크기 속성의 값 세 가지 wrap_content match_parent 숫자(단위 필수) 0dp = match_constraint in Constraint Layout Any OthersXML의 속성 Prefix는 파일의 상단에 추가되는 xmlns(XML NameSpace) 속성의 뒤에 붙는 이름으로 사용됨 XML의 Prefix 중 android는 안드로이드 기본 API에서 정의한 속성, app은 안드로이드 기본 API가 아닌 외부 라이브러리에 들어있는 속성이라는 의미","link":"/2019/11/01/%EC%83%9D%EC%A1%B4-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-1%EC%9D%BC%EC%B0%A8-%EB%B7%B0%EC%99%80-%EB%B7%B0%EA%B7%B8%EB%A3%B9/"},{"title":"생존 안드로이드 4일차 - LinearLayout","text":"한 쪽 방향으로만 뷰를 쌓는 레이아웃. 그래서 방향(Orientation)이 필수속성! (방향 속성값으로 vertical, horizontal 사용 가능) 123&lt;LinearLayout android:orientation=&quot;vertical&quot;&gt;&lt;/LinearLayout&gt; 리니어 레이아웃의 중첩을 이용해 웬만한 구성은 다 가능. 뷰 추가 in XMLXML에서는 리니어 레이아웃 태그 사이에 원하는 뷰를 추가하면됨. 1234567&lt;LinearLayout android:orientation=&quot;vertical&quot;&gt; &lt;Button/&gt; &lt;Button/&gt; &lt;Button/&gt;&lt;/LinearLayout&gt; 뷰 추가 in 자바코드화면을 미리 만들 수 없거나, 상황에 따라 바로 만들어서 사용해야하는 경우 자바코드로 화면 구성. 1234567891011LinearLayout linearLayout = new LinearLayout(this);linearLayout.setOrientation(LinearLayout.VERTICAL);LinearLayout.LayoutParams params = new LinearLayout.LayoutParams( LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);Button button7 = new Button(this);button7.setText(&quot;Button 7&quot;);button7.setLayoutParams(params);linearLayout.addView(button7); 뷰 객체를 코드에서 만들 때, 뷰의 생성자에는 항상 Context 객체가 전달되어야함. LayoutParams 객체레이아웃에 추가되는 뷰의 속성 중, 레이아웃과 관련된 속성을 담고 있음. 이 객체를 새로 만들 때 반드시 뷰의 가로와 세로 속성을 지정해야함 뷰 정렬 속성 layout_gravity: 내 바깥, 부모 컨테이너에 여유공간이 있을 때 나를 정렬 gravity: 내 안에 있는 뷰들을 정렬 속성값값들을 | 연산자를 이용해 동시에 적용 가능. 단, | 연산자 좌우에 공백이 없어야함. 각 방향들(top, right 등) fill, fill_*: 해당 방향으로 늘려서 채우기 clip_*: 남는 부분 잘라내기 예) right|clip_horizontal =&gt; 왼쪽에 남는 부분 잘라내기 baselineAligned 속성텍스트 높이를 맞추기위한 리니어 레이아웃의 정렬 속성. true가 디폴트값. 따라서 뷰의 배치가 이상해질 수도 있음. 필요에 따라 선택적으로 사용하면됨. 여유공간 분할layout_weight 속성을 이용해 남은 공간을 일정 비율로 분할 할당 가능. But! 부모 공간의 분할이 아닌 여유 공간의 분할이라는 것!!! Any OthersContext 객체 어떤 일이 발생한 상황 객체의 정보를 담고있는 객체 뷰의 정보를 확인하거나 설정할 수 있도록 돕는 객체 레이아웃 관련 속성XML에서 접두어로 layout_이 붙는 속성들은 자바코드에서 해당 레이아웃의 LayoutParams 클래스로 처리 가능.","link":"/2019/11/22/%EC%83%9D%EC%A1%B4-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-4%EC%9D%BC%EC%B0%A8-LinearLayout/"},{"title":"생존 안드로이드 2일차 - 제약 레이아웃 기초","text":"제약 레이아웃(Constraint Layout)뷰의 크기와 위치를 지정할 때 제약 조건을 사용하는 레이아웃 제약 조건(Constraint)뷰가 레이아웃 안의 다른 요소와 어떻게 연결되는지 알려주는 것. 연결점과 대상을 연결. 연결점(Anchor Point) 상하좌우(Top, Bottom, Left, Right, Start, End) 가로축 중심(CenterX), 세로축 중심(CenterY) 베이스라인(Baseline): 텍스트를 보여주는 뷰인 경우에만 적용 대상(Target) 같은 레이아웃 안에 들어있는 다른 뷰의 연결점 부모 레이아웃의 연결점 가이드라인 가이드라인(Guideline)뷰처럼 화면에 추가 가능하지만 크기가 0에 안보이고 레이아웃에서 없는 것으로 간주됨. 방향과 위치지정 필수! android:orientation: 방향 layout_constraintGuide_XXXXX: 위치 layout_constraintGuide_begin: 부모의 Top, Left, Start로부터 떨어진 거리 layout_constraintGuide_end: 부모의 Bottom, Right, End로부터 떨어진 거리 layout_constraintGuide_percent: 부모의 Top, Left, Start 기준 % 단위로 위치 지정 Any Othersxmlns:tools 안드로이드 스튜디오의 디자이너 도구 등에서 화면에 보여줄 때 사용. 앱이 실행될 때는 적용되지 않음. android:id 뷰의 구분자 역할. 레아아웃 파일 안에서 구분하거나, 자바 소스 파일에서 뷰를 찾을 때 사용. 안드로이드에서 사용하는 길이 단위 px(픽셀): 화면 픽셀의 수 dp(dip, density independent pixel):밀도 독립적 픽셀, 160dpi 화면을 기준으로 한 픽셀(예: 320dpi 디스플레이 화면에서 1dp는 2px) sp(sip, scale independent pixel):축척 독립적 픽셀, 텍스트 크기를 지정할 때 사용하는 단위. 가변 글꼴을 기준으로 한 픽셀. dp와 유사하나 글꼴의 설정에 따라 1sp당 픽셀 수가 달라짐. in(인치): 1인치로 된 물리적 길이 mm(밀리미터): 1밀리미터로 된 물리적 길이 em(텍스트 크기): 글꼴과 상관없이 동일한 텍스트 크기 표시 실제 앱 화면 구성 시 dp 단위를 주로 사용한다고함","link":"/2019/11/02/%EC%83%9D%EC%A1%B4-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-2%EC%9D%BC%EC%B0%A8-%EC%A0%9C%EC%95%BD-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B8%B0%EC%B4%88/"},{"title":"생존 안드로이드 5일차 - RelativeLayout &amp; TableLayout","text":"RelativeLayout부모 컨테이너나 다른 뷰와의 상대적인 위치를 이용해 뷰의 위치를 결정. 1234567&lt;RelativeLayout&gt; &lt;View layout_alignParentTop=&quot;true&quot; layout_above=&quot;@+id/button1&quot; layout_toLeftOf=&quot;@+id/button2&quot; /&gt;&lt;/RelativeLayout&gt; 부모 컨테이너와의 관계 이용 layout_alignParent(Top|Bottom|Left|Right)부모 컨테이너의 원하는 부분과 맞춤 layout_center(Horizontal|Vertical|InParent)부모 컨테이너와 중앙 맞춤 부모가 아닌 다른 뷰와의 관계 이용 layout_(above|below|toLeftOf|toRightOf)지정한 뷰의 원하는 방향에 배치 layout_align(Top|Bottom|Left|Right|Baseline)지정한 뷰의 원하는 부분에 맞춤 TableLayout격자 형태로 화면을 구성하는 레이아웃 1234567&lt;TableLayout&gt; &lt;TableRow&gt; &lt;Button/&gt; &lt;Button/&gt; &lt;Button/&gt; &lt;/TableRow&gt;&lt;/TableLayout&gt; stretchColumns: 여유공간을 필드값에 설정된 열들에게 분배 shrinkColumns: 넘치는 길이를 필드값에 설정된 열들을 축소시켜서 조절 layout_column: 열 인덱스 지정 layout_span: 뷰가 여러 열을 차지하도록 설정","link":"/2019/11/24/%EC%83%9D%EC%A1%B4-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-5%EC%9D%BC%EC%B0%A8-RelativeLayout-&-TableLayout/"},{"title":"생존 안드로이드 3일차 - 레이아웃","text":"레이아웃은 화면 안에 넣은 뷰의 크기와 위치를 정할 수 있도록 도와줌. 대표적인 안드로이드 레이아웃들 ConstraintLayout: 제약 조건 기반 모델 LinearLayout: 박스 모델. 한 방향으로 쌓는 방식 RelativeLayout: 규칙 기반 모델. 다른 뷰와의 상대적 위치로 화면 구성 FrameLayout: 싱글 모델. 가장 상위에 있는 하나의 뷰만 보여줌 TableLayout: 격자 모델. 실용적이지만 자주 사용하지 않음. GridView라는 위젯이 유사한 기능 제공. 옛날에 AbsoluteLayout도 있었음. Any Others뷰의 영역 Border : 뷰의 테두리 Box : 뷰의 영역 Margin : Border와 Box 사이의 공간 Padding : Border와 뷰의 내용물 사이의 공간 뷰의 배경색background 속성으로 설정. 색 지정 형식 : #RGB, #ARGB, #RRGGBB, #AARRGGBB 이미지 지정 : 리소스의 위치값 설정 1234&lt;TextViewandroid:background=&quot;#00112233&quot;android:background=&quot;@drawable/image&quot;/&gt;","link":"/2019/11/20/%EC%83%9D%EC%A1%B4-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-3%EC%9D%BC%EC%B0%A8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/"},{"title":"생존 안드로이드 6일차 - ScrollView","text":"레이아웃 남았는데 왜 갑자기 쌩뚱맞게 스크롤뷰가 나오는지는 모르겠지만… (현재 Do It 안드로이드 앱 프로그래밍 5판으로 공부 중) ScrollView1234567&lt;ScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;!-- 뷰 딱 하나! --&gt;&lt;/ScrollView&gt; 추가가 된 뷰가 한 눈에 다 보이지 않을 때 사용. 스크롤뷰 안에 한 개의 뷰만 들어갈 수 있음. 기본적으로 수직 방향의 스크롤 지원 수평 방향 스크롤은 HorizontalScrollView 사용 123456789101112&lt;ScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;HorizontalScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;!-- 뷰 딱 하나! --&gt; &lt;/HorizontalScrollView&gt;&lt;/ScrollView&gt; INFO : 수직/수평 스크롤을 함꼐 사용할 때, 안과 밖을 바꿔도 상관없음.","link":"/2019/11/26/%EC%83%9D%EC%A1%B4-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-6%EC%9D%BC%EC%B0%A8-ScrollView/"},{"title":"[TIL] HTML 기초","text":"HTML(HyperText Mark-up Language)하이퍼텍스트 마크업 랭귀지 여기서 마크업이 중요함. 마크업 = 표시하는 것.브라우저에게 “여기서부터 여기까지가 타이틀이야”라고 표시해서 각 요소들이 무엇인지 알려주는 것. TagHTML은 각종 태그들로 구성되어 있음. 물건에 어떤 표시를 할 때 태그를 붙이는 것 처럼, 문서에 태그를 붙인다는 생각이 들었음. 쌍을 이루는 태그일반적으로 많이 쓰이는 형태 1&lt;name attribute=&quot;value&quot;&gt;Content&lt;/name&gt; Self-contained 태그스스로 열고 닫는 태그. 이 태그는 그 자체로 정보를 제공하기 때문에 쌍으로 감쌀 필요가 없음. 1&lt;!DOCTYPE html&gt; Semantic 태그 VS Non-semantic 태그태그에 의미가 있는가의 차이. 태그 이름만 봐도 어떤 역할을 하거나 어떤 의미를 가지는 것들이 있고 아닌 것들이 있음. 12345678&lt;!-- Semantic --&gt;&lt;h1&gt;Big title&lt;/h1&gt;&lt;header&gt;It is header&lt;/header&gt;&lt;section&gt;This is difficult section.&lt;/section&gt;&lt;!-- Non-semantic --&gt;&lt;div&gt;박스, 컨테이너 역할을 많이하마.&lt;/div&gt;&lt;span&gt;텍스트를 위한 컨테이너&lt;/span&gt; ID요소별로 하나만 가질 수 있고, 고유한 아이디임. 1&lt;h1 id=&quot;big-h1&quot;&gt;&lt;/h1&gt; Class여러개를 가질 수 있고, 여러 요소가 같은 클래스를 가질 수 있음. 1&lt;h1 class=&quot;class-name-1 class-name-2&quot;&gt;&lt;/h1&gt; HTML 문서 구성12345&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt;&lt;/html&gt; &lt;head&gt;유저에게 보이지 않는 브라우저에게 필요한 정보를 제공. Information &lt;body&gt;유저에게 보이는 정보. Contents","link":"/2020/04/04/TIL-HTML-%EA%B8%B0%EC%B4%88/"},{"title":"[TIL] CSS 선택자 &amp; 애니메이션","text":"선택자와 의사 선택자(Selectors and Psuedo Selectors)속성 선택자(Attribute Selector)a[attribute] | 속성이 있으면 모두 선택a[attribute=&quot;value&quot;] | 속성값이 문자열이면 선택a[attribute~=&quot;value&quot;] | 속성값이 문자열을 포함하면 선택(스페이스로 구분된 단어 기준)a[attribute|=&quot;value&quot;] | 속성값이 문자열로 시작하면 선택(단어 전체이거나 하이픈(-)으로 구분)a[attribute^=&quot;value&quot;] | 속성값이 문자열로 시작하면 선택a[attribute$=&quot;value&quot;] | 속성값이 문자열로 끝나면 선택a[attribute*=&quot;value&quot;] | 속성값이 문자열을 포함하면 선택 HTML 요소의 속성을 이용해 선택. 결합자(Combinators)선택자 간의 관계를 설명하는 것 자손 결합자(Descendant Combinator)123div p { background-color: green;} 명시된 요소의 자손인 모든 요소를 선택. 자식 결합자(Child Combinator)123div &gt; p { background-color: green;} 명시된 요소의 직계 자식인 모든 요소를 선택. 인접 형제 결합자(Adjacent Sibling Combinator)123div + p { background-color: green;} 명시된 요소와 같은 부모를 갖고, 바로 다음에 따라오는 요소를 선택. 일반 형제 결합자(General Sibling Combinator)123div ~ p { background-color: green;} 명시된 요소와 같은 부모를 갖는 요소를 선택 의사 클래스(Pseudo Classes)요소의 특별한 상태일 때 선택하는데 사용 예시) :hover : 요소에 마우스 오버된 상태 :last-child : 자식 요소들 중 마지막일 때 :focus : 현재 요소에 포커스가 잡혔을 때 등 의사 요소(Pseudo Elements)요소의 특정한 일부분에 스타일을 적용할 때 사용 예시) ::first-letter : 요소의 첫 글자, 첫 줄::after, ::before : 요소의 컨텐츠 전, 후 등 Transitions123.box { transition: target duration timing-function delay;} 요소의 상태 변화 시 두 상태간의 전환을 정의하는 것. transition property - MDN Transformations123.box { transform: transform-functions;} 요소 모양이나 크기, 방향 등 좌표공간을 변환하는 효과. transform property - MDN Animations12345678910111213141516171819202122.box { animation: animation-name 1.5 infinite ease-in-out;}@keyframes animation-name { /* from { transform: none; } to { transform: rotate(1turn) scale(.5, .5); } */ 0% { transform: none; } 50% { transform: rotate(1turn) scale(0.5, 0.5); background-color: royalblue; } 100% { transform: none; }} @keyframes를 이용해 애니메이션을 정의해놓고 이를 적용할 수 있음. 내부에는 애니메이션의 시작과 끝이나 진행도에 따른 요소의 스타일 적용이나 전환이 가능. animation property - MDN Media Queries12345@media screen and (min-width: 320px) and (max-width: 640px) { body { background-color: slateblue; }} 다양한 기기의 환경에 맞춰 보여줄 수 있도록 스크린 크기에 따라 다른 스타일을 적용시킬 수 있도록 도와줌. Media Queries - MDN @media - MDN","link":"/2020/04/06/TIL-CSS-Selector-and-Animation/"},{"title":"[TIL] CSS 기초 &amp; Box Model &amp; Position &amp; Flexbox","text":"CSS(Cascading Style Sheets)란각 요소들이 어떻게 생겨야하는지(색깔, 모양, 크기, 위치 등) 브라우저에게 알려주는 역할. HTML = 마킹 | CSS = 디자인 CSS 작성법12345678selector { property: value;}/* 예시 */h1 { background-color: #112233;} 선택자(Selector)Tag | tag-name {...}Class | .class-name {...}ID | #id {...} 스타일을 적용할 대상을 지정하는 요소. 주로 위 세 가지를 이용함. 여러 선택자를 복합해서 사용할 수도 있으며, 이 외에도 다양한 선택자들이 있음. CSS Selectors Reference - W3Schools CSS 적용 방법HTML 파일 내 작성1234567891011&lt;html&gt; &lt;head&gt; ... &lt;style&gt; .box { background-color: aqua; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt;&lt;/html&gt; &lt;head&gt; 태그 안에 &lt;style&gt; 태그로 CSS 선언 가능. 해당 페이지에 적용됨. 다만, HTML 문서마다 모두 따로 관리해야하는 불편함이 있음. HTML 파일 밖에 작성(feat styles.css)123&lt;head&gt; &lt;link href=&quot;styles.css&quot; rel=&quot;stylesheet&quot; /&gt;&lt;/head&gt; css 확장자로 파일을 만들고 그 안에 CSS 선언. &lt;head&gt;태그 안에서 &lt;link&gt; 태그로 연결 가능.파일을 분리해서 관리하기 때문에 관리가 효율적이고 재사용이 쉬움. Box Model요소를 만들면 사각형 Box 모양으로 공간을 차지하게됨. {: width=”70%”} Border | 테두리Padding | 테두리 안쪽 간격Margin | 테두리 바깥쪽 간격 Padding, Margin 설정 방법123456789101112.box { /* 방향별로 각각 적용 */ padding-top: 50px; padding-left: 50px; margin-top: 50px; margin-left: 50px; /* 모든 방향 한꺼번에 적용 */ padding: 50px; /* 한 프로퍼티에서 방향별로 각각 적용. 상하좌우 순서. */ padding: 20px 0px 50px 30px; margin: 50px 20px 30px 40px;} Border 설정 방법12345678.inside-box { /* 보더 속성별로 설정 */ border-width: 5px; border-color: red; border-style: dashed; /* 한 프로퍼티에서 한 꺼번에 설정 */ border: 5px dashed red;} Display Property123.class { display: block;} Value Description block 요소의 옆에 아무 것도 허용하지 않음. 요소의 크기와 상관없음. 디폴트 설정. 폭, 높이가 존재함. inline-block 요소들을 같은 라인에 둘 수 있음. 폭, 높이가 존재함. inline 블록이나 박스가 아닌 텍스트처럼 적용이됨. 요소의 컨텐츠 크기만큼만 적용됨. 블록처럼 따로 크기를 설정할 수 없음. Position Property123#id { position: fixed;} 요소를 어떻게 위치시킬 것인지 정의. 좌표는 top, bottom, left, right 속성들과 함께 사용. Value Description static 기본적인 포지션 말 그대로 정적인 포지션으로 페이지 내 정해진 위치에 고정. 스크롤하면 스크롤하는대로 올라감. fixed 페이지가 아닌 스크린에 고정되는 포지션. 스크롤해도 화면의 해당 위치에 고정되서 따라옴. relative Absolute 포지션의 기준이 되는 포지션. 단, Absolute 포지션이 설정된 태그의 부모이거나 조상이어야만 기준으로 역할함. absolute Relative 포지션을 기준으로 위치하는 포지션. 부모나 조상 중 Relative 포지션이 없으면 body 태그를 기준으로 위치함. 거의 다 이상하게 써놨다… 새로 쓴 글을 참고하자! Flexbox인라인블록을 이용하던 과거에는 문제가 많았음. 공간에 맞춰 마진을 하나하나 조정해야했고, 화면 크기가 변하는 것에 모두 수동으로 대응해야했음. 자동 조정되는 그리드가 없었음. 이를 해결해주는 것이 Flex! 플렉스가 설정된 요소의 자식 요소들이나 컨텐츠의 간격, 방향, 정렬 등의 일괄 적용이 가능. 123.father { display: flex;} Flex는 진행축(main axis)과 교차축(cross axis) 개념이 있음. 진행축은 아이템들이 배치되는 방향, 교차축은 진행축과 90도 교차하는 방향을 축을 이야기함. 단순히 X축, Y축으로 이야기하지 않는 이유는 축의 방향도 바꿀 수 있기 때문임. Flexbox 공부용 코드게임 - 이거 효과 좋음! Property Description justify-content 진행축의 배치 방법을 결정하는 프로퍼티. align-items 교차축의 배치 방법을 결정하는 프로퍼티. flex-direction 플렉스의 방향을 결정하는 프로퍼티 flex-wrap 아이템의 줄바꿈 여부와 방향을 설정하는 프로퍼티 flex-flow flex-direction과 flex-wrap을 동시에 설정할 수 있는 프로퍼티 align-content 플렉스 아이템들이 여러 줄일 때 줄간의 간격이나 정렬을 결정하는 프로퍼티 align-self 여러 아이템 중 원하는 단일 플렉스 아이템에 교차축 배치 방법을 설정하는 프로퍼티 order 아이템의 순서를 설정하는 프로퍼티. 기본 0. 양수, 음수 모두 설정 가능.","link":"/2020/04/05/TIL-CSS-Basic-And-Box-Model-And-Position-And-Flexbox/"},{"title":"[TIL] Prettier, Emmet, Font Awesome","text":"Nomad Coders의 카카오 클론 코딩 강좌 실습편 중 Status Bar를 실습하며 배운 내용. Prettier 설정VSCode Extensions에서 Prettier 검색 후 설치. 근데 Prettier가 많길래 사용자 제일 많은 것으로 고름. Prettier 설치 후 에디터 설정에서 저장 시 자동 Formatting 동작 설정. 설정 - 텍스트 편집기 - Editor: Code Actions On Save settings.json에서 편집 선택 후 &quot;editor.formatOnSave&quot;: true, 추가 Emmet 사용법텍스트 편집기 플러그인. CSS 스타일의 약어(Abbreviation)들을 이용해 HTML, CSS 작성 효율을 올려줌. 1234567891011121314151617&lt;!-- 태그 입력 --&gt;div&lt;div&gt;&lt;/div&gt;&lt;!-- 같은 태그 한 번에 여러개 생성 --&gt;div*3&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;!-- 클래스가 입력된 태그 생성 --&gt;div.box&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;!-- 여러 클래스가 함께 입력된 태그 생성 --&gt;div.box.big.red&lt;div class=&quot;box big red&quot;&gt;&lt;/div&gt; 약어들의 기본 틀은 선택자와 결합자들인 듯. Font Awesome https://fontawesome.com/icons 웹사이트에서 벡터 아이콘과 소셜 로고들을 쉽게 이용할 수 있게 제공해주는 사이트. Kit 코드 추가123456&lt;head&gt; &lt;script src=&quot;https://kit.fontawesome.com/{kit-name}.js&quot; crossorigin=&quot;anonymous&quot; &gt;&lt;/script&gt;&lt;/head&gt; 아이콘 추가원하는 키워드로 검색. 아이콘 정보 페이지에 아이콘 추가 코드있음. 1&lt;i class=&quot;fas fa-cog&quot;&gt;&lt;/i&gt; 뜬금 없지만, 저 클래스 이름들 풀버전이 궁금하다. fa면 font-awesome이라고 알아듣는데 fas은 뭐지?","link":"/2020/04/08/TIL-Prettier-Emmet-Font-Awesome/"},{"title":"[TIL] fas의 비밀, div가 많이 보이는 이유","text":"Font Awesome 사용할 때 fas 클래스의 비밀이 풀렸다fas = Font Awesome Solid 뒤에 s가 Solid를 의미하는 거였다! 그래서 다른 스타일들인 Regular, Light, Duotone은 각각의 앞글자를 따서 far, fal, fad로 변경이 가능함. “왜 이렇게 div를 많이 쓰는걸까?”예전부터 웹페이지 HTML 코드를 보면 “왜 이렇게 div를 많이 쓰는걸까?” 라는 생각을 했었는데, 카톡 클론 수업 들으면서 직접 웹페이지를 구성해보니 약간은 알 것 같음. 태그는 웹페이지의 컨텐츠에 표시를 하는 용도이며, 이를 꾸미고 배치하는 정보는 CSS로 표현함. 그걸 어떻게 해석해서 어떻게 보여줄지는 브라우저가 하는 일임. 그래서 안드로이드의 레이아웃들 같은 역할을 하는 태그는 없음. 태그는 구역을 나누거나 태그로 감싼 컨텐츠가 무엇인지 표시하고, 레이아웃 구성이나 배치, 모양 등은 CSS가 함. 이렇게 구역을 나누는 일을 태그가 하다보니 div 태그가 많이 쓰일 수 밖에 없는 것 같음.","link":"/2020/04/11/TIL-fas%EC%9D%98-%EB%B9%84%EB%B0%80-div%EA%B0%80-%EB%A7%8E%EC%9D%B4-%EB%B3%B4%EC%9D%B4%EB%8A%94-%EC%9D%B4%EC%9C%A0/"},{"title":"[TIL] 경로엔 소문자, 전역 클래스, Reset CSS","text":"모든 경로와 파일명은 소문자로 하자경로나 파일명으로 인해 생기는 많은 문제들을 막아줄거야! 전역 클래스웹사이트 전체에서 공통적으로 사용되는 스타일은 전역 클래스를 만들어서 관리 &amp; 적용하자! Reset CSSReset CSS - meyerweb.com 브라우저별로 다르게 적용되는 CSS 기본값들(h1 태그 폰트 크기, ul 태그의 리스트 점 모양 등)을 없애고 0으로 리셋하는 스타일시트. 비슷한 것으로 Normalize.css가 있음. 이건 이름처럼 모든 브라우저에서 일정할 수 있도록 기준을 설정하는 것.","link":"/2020/04/12/TIL-%EA%B2%BD%EB%A1%9C%EC%97%94-%EC%86%8C%EB%AC%B8%EC%9E%90-%EC%A0%84%EC%97%AD-%ED%81%B4%EB%9E%98%EC%8A%A4-Reset-CSS/"},{"title":"[TIL] &#96;display:block&#96;은 누구에게?","text":"display: block 속성오늘도 카톡 클론 중 궁금증 발생! 왜 display: block을 요소의 부모가 아닌 해당 요소에게 직접 설정하는가? 123.container { display: &lt;display-keyword&gt;;} display 속성은 6가지의 값을 가짐. &lt;display-outside&gt;플로우 레이아웃에서 요소 자신의 역할. block|요소의 앞 뒤로 줄바꿈을 만드는 블록 요소 생성.inline|요소의 앞 뒤로 줄바꿈을 만들지 않는 인라인 요소 생성. &lt;display-inside&gt;요소 컨텐츠의 서식과 배치 방법을 나타냄. flow-root|The element generates a block element box that establishes a new block formatting context, defining where the formatting root lies.(해석이 안된다;;)table|&lt;table&gt;처럼 동작하는 블록 레벨 요소를 정의flex| 플렉스 모델을 따르고 블록 요소처럼 동작grid|그리드 모델을 따르고 블록 요소처럼 동작 &lt;display-listitem&gt;요소가 컨텐츠 블록 박스를 생성하고, 리스트 아이템 인라인 박스를 분리함. &lt;display-internal&gt;table, ruby 등 일부 레이아웃 모델은 복잡한 내부 구조를 가지며, 자식과 자손이 채워넣을 여러가지 역할을 지님. 그런 특정 레이아웃 모드에서만 의미를 갖는 값을 정의. table-row-group|&lt;tbody&gt; 처럼 동작table-header-group|&lt;thead&gt; 처럼 동작table-footer-group|&lt;tfoot&gt; 처럼 동작table-row|&lt;tr&gt; 처럼 동작table-cell|&lt;td&gt; 처럼 동작table-column-group|&lt;colgroup&gt; 처럼 동작table-column|&lt;col&gt; 처럼 동작table-caption|&lt;caption&gt; 처럼 동작 &lt;display-box&gt;요소의 디스플레이 박스를 생성해야하는지 지정. none|요소를 없앰.(공간은 남기고 보이지만 않게하려면 visibility 사용) &lt;display-legacy&gt;CSS 2는 display 속성에 단일 키워드만 사용했음. 같은 레이아웃 모드를 위해 블록 레벨과 인라인 레벨 키워드를 각각 필요로 했음. inline-block|inline flow-root와 같음inline-table|inline table와 같음inline-flex|inline flex와 같음inline-grid|inline grid와 같음 결론즉, block은 &lt;display-outside&gt;에 속하고, 이는 자식 요소들에게 영향을 끼치는 것이 아닌, 해당 요소에게 직접 적용되는 것. 그래서 block으로 설정하고싶은 요소의 부모가 아닌 해당 요소에게 직접 설정하는 것임. References display - CSS | MDN","link":"/2020/04/17/TIL-display-block%EC%9D%80-%EB%88%84%EA%B5%AC%EC%97%90%EA%B2%8C/"},{"title":"[TIL] Google Fonts, box-sizing","text":"카톡 클론 수업에서 드디어 CSS 실습 시작! Google Fonts https://fonts.google.com/ 각종 폰트들을 무료로 사용할 수 있음. 폰트 파일 다운로드, &lt;link&gt; 태그나 CSS의 @import를 이용해 가져오는 것도 가능. 굵기, 기울기 여부도 선택 가능. 단, 너무 많은 폰트를 가져오면 느려짐! font-family 설정폰트 하나가 아닌 여러개로 설정이 가능하며, 앞의 폰트가 없으면 그 다음 폰트를 사용하는 방식. color: inherit부모 요소의 색을 가져온다. box-sizing: border-box네비게이션 바에 flex를 설정하니까 아이콘 하나가 사라짐. 그러자 니콜라스님이 “어? ㅆ 맨 끝에 아이콘이 하나 어디갔지? 뭐 하나만 해볼게.” 하면서 box-sizing: border-box를 설정함. 그러자 사라졌던 아이콘이 다시 나타남. 12345678* { box-sizing: content-box | border-box | initial | inherit;}/* * content-box: 컨텐츠 영역 기준(패딩조차 미포함) * border-box: 박스 테두리 기준(패딩, 테두리 포함) */ box-sizing은 박스의 크기 기준을 정하는 속성. 기본값은 content-box. 내 생각에 아이콘들의 부모 요소에 width: 100%를 주면서 부모의 크기가 먼저 정해졌고, 그 자식요소에 display: flex를 설정하면서 각각의 아이콘 박스들에 분배된 크기는 고정되었으나, 그 크기의 기준이 컨텐츠로 설정되어 있어서 화면 밖으로 나간 듯. 그러나 니콜라스님의 설명은 좀 달랐다! 다음은 니콜라스님의 설명. content-box가 설정된 상태에서 padding이 설정되면 컨텐츠의 크기는 유지되면서 padding만큼 밀려남. 우리는 부모 요소에게 가로길이를 100%로 설정하고, 패딩도 함께 설정함. 그래서 패딩만큼 밀려났고, 그 때문에 맨 마지막 아이콘이 안보였던 것. 내 생각 중 display: flex에 대한 부분은 무관했음. 가로길이와 패딩이 같은 요소에 설정됐다는 것을 인지하지 못하고 생각해서 저렇게 생각한 듯.","link":"/2020/04/15/TIL-Google-Fonts-box-sizing/"},{"title":"[TIL] object-fit","text":"object-fit: cover니콜라스님의 강의를 따라가다 카톡 프사를 만들 차례가 됨. 그런데 내 이미지는 직사각형인데, 니콜라스님 이미지는 정사각형이이었음. 니콜라스님은 width 속성만 바꿔도 비율 유지된 상태로 정사각형이 되는데, 나는 아직 직사각형. 그래서 정사각형으로 자를 수 있는 방법을 찾아봄. 1234567891011img { object-fit: fill | contain | cover | none | scale-down;}/* * fill: 지정된 높이와 너비에 맞게 늘어남. 종횡비 유지되지 않음. * contain: 종횡비 유지 상태에서 지정된 높이와 너비에 모두 들어가도록 확대 * cover: 종횡비 유지 상태에서 지정된 높이와 너비에 가득 찰 때까지 확대 * none: 요소의 크기와 상관없이 기본 알고리즘에 의해 조정. 이 알고리즘은 원본 크기에 가운데 정렬된 형태를 띔. * scale-down: 컨텐츠의 크기를 아무것도 지정되지 않거나 contain이 지정되어 있는 것처럼 변경한다. 이는 원본 크기보다 작아지는 결과를 보여준다. */ MS Internet Explorer에서 미지원. 나머지는 다 지원함.","link":"/2020/04/16/TIL-object-fit/"},{"title":"[TIL] &#96;cursor:pointer&#96;, Subtle Patterns","text":"cursor: pointer12345678910111213.element { cursor: &lt;url&gt;, &lt;url&gt; &lt;x&gt; &lt;y&gt;, ..., &lt;cursor-keyword&gt;;}/* * 마지막 &lt;cursor-keyword&gt;는 필수. * &lt;url&gt;은 0개 이상. 맨 앞부터 시도해서 성공한 것으로 보여줌. * &lt;url&gt;이 다 실패하면 키워드 사용. * &lt;x&gt;, &lt;y&gt;는 커서 상호작용 부분을 기준으로 이미지 좌상단의 위치를 나타냄. * * &lt;url&gt; : url(image-file) * &lt;x&gt;, &lt;y&gt; : 32 미만의 &lt;number&gt; */ 요소 위에 마우스 커서가 올라갔을 때 보여줄 모양을 지정. Subtle Patternshttps://www.toptal.com/designers/subtlepatterns/ 다양한 패턴들을 무료로 다운받을 수 있는 웹사이트. 패턴들의 저작권은 CC BY-SA 3.0(저작자표시 - 동일조건변경허락).","link":"/2020/04/18/TIL-cursor-pointer-Subtle-patterns/"},{"title":"[TIL] &#96;outline&#96;, &#96;vh&#96;, 배경에 그래디언트 적용, &#96;z-index&#96;, Github Pages로 호스팅","text":"오늘은 카톡 클론 수업 중 Settings, Chat CSS 적용! outline이 정확히 뭐지123input:focus { outline: none;} 카톡 클론 수업 중 위 처럼 입력창이 포커스됐을 때, outline: none으로 설정했음. 여기서 outline이 뭔지 시각적인 차이는 알겠는데, 개념적으로 모르겠어서 찾아봄. Outline = 윤곽, 외곽선, 테두리from 네이버 사전 그럼 Border와 무슨 차이가 있을까? Outlines never take up space, as they are drawn outside of an element’s content. 아웃라인은 요소 컨텐츠의 바깥에 그려지지만, 절대 공간을 차지하지 않음. According to the spec, outlines don’t have to be rectangular, although they usually are. 스펙에 따르면 아웃라인은 (보통 그렇긴 하지만) 꼭 사각형일 필요가 없음. From outline - CSS | MDN 참고로 Border의 사전적 의미는 경계임. 결국 Outline은 테두리 경계 공간을 변화시키지 않고 윤곽선의 모양만 바꾸고 싶을 때 사용하는 속성이다! vh는 무엇인가뷰포트 백분율 길이 단위 중 하나. 1vh = 뷰포트 초기 컨테이닝 블록의 높이 1% from &lt;length&gt; - CSS | MDN 뷰포트(Viewport)컴퓨터 그래픽스 용어. 현재 화면에 보여지고 있는 다각형(보통 직사각형)의 영역. 웹 브라우저에서는 현재 창에서 문서를 볼 수 있는 부분. 컨테이닝 블록(Containing Block)요소를 포함하고 있는 블록을 의미. 요소의 크기와 위치에 영향을 줌. 대부분 가장 가까운 블록 레벨 조상의 컨텐츠 영역. 초기 컨테이닝 블록 = 루트 요소(&lt;html&gt;)의 컨테이닝 블록 = 뷰포트 또는 (페이지로 나뉘는 매체에선) 페이지 영역의 크기 요소 배경으로 그래디언트 넣기uiGradients: 이쁜 색깔 그래디언트를 찾을 수 있는 웹사이트 123element { background-image: linear-gradient(to left, #7474bf, #348ac7);} 그래디언트를 배경으로 하고싶을 때는 background-color가 아닌 background-image로 넣어야함. z-indexz-index - CSS | MDN 123element { z-index: &lt;number&gt;;} 요소들 사이의 겹치는 순서. 숫자가 높을수록 위로 올라옴. 그런데 이 쌓이는 순서가 생각보다 복잡한 듯. 시간되면 좀 읽어봐야할 듯. z-index 이해하기 - CSS | MDN Github Pages로 호스팅하기gh-pages 브랜치 만들어서 푸시하면 해당 브랜치를 통해 호스팅 가능. 호스팅된 프로젝트 접근 URL은 https://username.github.io/repository-name. 더 알아봐야할 것들&lt;div&gt;와 &lt;span&gt;에서 box-shadow의 동작 차이카톡 클론 수업 중 &lt;div&gt;text&lt;/div&gt;와 &lt;span&gt;text&lt;/span&gt;에서 box-shadow 속성이 다르게 동작하는 이슈 발생. 그림자가 div에서는 안보이고 span에서는 보였음. 정확한 이유는 아직 모르겠음…","link":"/2020/04/19/TIL-outline-vh-%EA%B7%B8%EB%9E%98%EB%94%94%EC%96%B8%ED%8A%B8-%EB%B0%B0%EA%B2%BD-z-index-Github-Pages-%ED%98%B8%EC%8A%A4%ED%8C%85/"},{"title":"[TIL] script 태그의 위치, console.dir","text":"&lt;script&gt;를 &lt;body&gt;의 마지막에 써야하는 이유How to work the browser HTML Read &amp; Parse Generate DOM Tree Generate Render Tree(DOM Tree + CSSOM Tree) Display HTML을 읽으며 파싱해나가는 중 스크립트 태그를 만나면 파싱 중단. 스크립트 로드 &amp; 실행이 끝나고 나서 HTML 파싱이 재개됨. Problems 스크립트를 처리하는 시간만큼 Display가 지연됨. 자바스크립트가 아직 생성되지 않은 DOM의 조작을 시도할 수 있음. Solutions &lt;script&gt;를 &lt;body&gt;의 맨 마지막에 사용. &lt;script&gt;에 defer 속성을 사용. defer를 사용하면 스크립트 로드는 스크립트 태그를 파싱한 시점에, 스크립트 실행은 HTML 파싱이 끝난 이후에 진행됨. References &lt;script&gt; 태그는 어디에 위치해야 할까요? | takeknowledge DOM(Document Object Model)console.dir자바스크립트 객체의 속성들을 보기쉽게 출력해주는 콘솔 객체의 메소드. dir과 count, time, timeEnd 메서드들이 많이 사용됨.","link":"/2020/04/21/TIL-script-%ED%83%9C%EA%B7%B8%EC%9D%98-%EC%9C%84%EC%B9%98-console-dir/"},{"title":"[TIL] Vanilla JS, &#96;var&#96; vs &#96;let&#96;","text":"자바스크립트의 다양한 활용 Socket.IO: 이벤트 기반의 실시간 양방향 통신 라이브러리 ImpactJS: Javascript &amp; HTML5 게임 엔진 World Draw: 그림을 그리면 어떤 사물인지 알아맞추는 페이지. three.js: Javascript 3D 라이브러리 Vanilla Javascript라이브러리를 사용하지 않는 자바스크립트. http://vanilla-js.com/ : 바닐라 자바스크립트 웹사이트. 좀 재밌게 만들었음ㅋ var vs let 차이점 var let 비고 유효범위 함수 {} 블록 let은 전역객체의 속성값을 생성하지 않음. 비공개 변수 클로저 필수 생성자로 가능 Hoisting 적용 적용안됨 초기화 전 참조 undefined 값 가짐 ReferenceError 발생 변수 선언이 평가되기까지 초기화되지 않았다는 의미 let - JS | MDN","link":"/2020/04/20/TIL-Vanilla-JS-var-vs-let/"},{"title":"[TIL] &#96;element.classList&#96;, &#96;setInterval()&#96;","text":"element.classListelement.className으로 요소의 클래스 속성값을 모두 가져올 수 있음. 그런데 일부만 수정하기가 난감함. 그럴 때 필요한 것이 이 element.classList 1234567const hasClass = title.classList.contains(CLICKED_CLASS);if (hasClass) { title.classList.remove(CLICKED_CLASS);} else { title.classList.add(CLICKED_CLASS);} 위 예시처럼 특정 클래스의 존재 여부는 물론, 추가/제거가 가능하다. 그리고 element.classList.toggle(className)을 이용하면 위 코드와 같은 효과를 낼 수 있음. setInterval()1setInterval(fn, milliseconds, ...arguments); 주어진 함수를 일정 간격으로 실행시키는 함수","link":"/2020/04/22/TIL-element-classList-setInterval/"},{"title":"[TIL] &#96;createElement()&#96;, &#96;appendChild()&#96;, Node와 Element의 차이","text":"현재 Momentum Clone의 ToDo List 파트 진행 중 createElement()12const tagName = &quot;h2&quot;;let element = document.createElement(tagName); 첫 번째 인자 tagName에 해당하는 HTML 요소를 만들어줌. appendChild()1var child = parent.appendChild(child); 한 노드를 특정 노드의 마지막 자식 노드로 붙임. 만약 이미 문서 내에 존재하는 노드면 이동시킴. Node와 Element의 차이 Node : DOM 구성의 기본 단위. 여러가지 DOM 타입들이 상속하는 인터페이스. Element : Document 안의 모든 객체가 상속하는 가장 범용적인 기반 클래스. 출처 : The Document Object Model Node는 Element의 상위 타입이다.","link":"/2020/04/25/TIL-createElement-appendChild-Node%EC%99%80-Element%EC%9D%98-%EC%B0%A8%EC%9D%B4/"},{"title":"[TIL] Local Storage, &#96;removeChild()&#96;, &#96;new Image()&#96;, 위치 정보 가져오기, &#96;fetch()&#96;","text":"Local StorageWeb Storage의 두 가지 매커니즘 중 하나. sessionStorage | 페이지 세션이 유지되는 동안 사용할 수 있는 각각의 오리진에 별도의 저장 공간을 유지. (페이지 리로드 및 복구를 포함하여, 브라우저가 열려있는 한)localStorage | 위와 같은 컨셉이지만, 브라우저가 닫히고, 다시 열려도 데이터를 유지합니다. key/value 데이터를 저장할 수 있으며, key와 value 모두 문자열만 사용 가능. 1234localStorage.setItem(&quot;key&quot;, &quot;value&quot;);localStorage.getItem(&quot;key&quot;);localStorage.removeItem(&quot;key&quot;);localStorage.clear(); removeChild()1var removedChild = node.removeChild(child); DOM에서 자식 노드를 제거하는 메소드. 인자로 주어지는 노드가 DOM에 존재하지 않거나, 해당 노드의 자식이 아니면 예외 발생. new Image()HTMLImageElement를 만드는 생성자. 기능적으로 document.createElement('img')와 동일함. 위치 정보 가져오기123456function onSuccess(position) { const lat = position.coords.latitude; const lon = position.coords.longitude;}navigator.geolocation.getCurrentPosition(onSuccess); Navigator 인터페이스를 통해 사용자 에이전트(브라우저)의 상태와 신원정보를 나타냄. window.navigator 읽기전용 속성을 통해 객체에 접근. Navigator.geolocation을 통해 장치의 위치를 알아내기 위한 Geolocation 객체 획득. 단, 브라우저별로 권한 획득에 대한 정착과 요청 방식이 다르므로 주의해야함. getCurrentPosition() 메소드를 통해 현재 위치를 GeolocationPosition 객체의 형태로 획득. Open Weather Map날씨 정보 오픈 API. 현재 날씨, 시간별, 일별 등 다양한 날씨 정보 제공. fetch()123fetch(url).then((response) =&gt; { // do something}); 리소스(네트워크 건터편에 있는 것들 포함)를 가져오기 위한 인터페이스. 원래는 XMLHttpRequest라는 비슷한 API가 있지만, 새로운 Fetch API는 좀 더 강력하고 유연한 조작이 가능함.","link":"/2020/04/26/TIL-Local-Storage-removeChild-new-Image-%EC%9C%84%EC%B9%98-%EC%A0%95%EB%B3%B4-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0-fetch/"},{"title":"[TIL] github&#x2F;gitignore, Git history 전체에서 특정 파일 제거하기","text":"github/gitignorehttps://github.com/github/gitignore 온갖 언어와 프레임워크를 위한 .gitignore 파일들이 모여있는 저장소. Git history 전체에서 특정 파일 제거하기1git filter-branch --tree-filter &quot;rm -f wrong_file&quot; HEAD 모든 커밋에서 특정 파일을 제거하는 명령 참고 : https://better-today.tistory.com/22","link":"/2020/04/27/TIL-github-gitignore-git-history-%EC%A0%84%EC%B2%B4%EC%97%90%EC%84%9C-%ED%8A%B9%EC%A0%95-%ED%8C%8C%EC%9D%BC-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0/"},{"title":"[TIL] Babel, Middlewares","text":"BabelECMAScript 2015 이상의 최신 자바스크립트 코드를 오래된 브라우저나 환경에서 사용할 수 있도록 옛날 버전 코드로 변환해주는 컴파일러. @babel/node노드 CLI 처럼 동작하는 CLI. 실행 전에 프리셋과 플러그인대로 컴파일해주는 것이 추가된 장점. nodemon소스코드가 변경되면 자동으로 서버를 재시작해주는 개발 도구. 꼭 서버가 아니어도 실행 가능. Middleware - ExpressJS중간에 실행되는 코드. 특정 라우터에 끼울 수도 있고, 전체에 일괄 적용할 수도 있음. 미들웨어를 적용할 때 순서가 매우 중요함. app.use()를 이용해 미들웨어를 적용한 코드 아래의 라우터들만 미들웨어가 동작함. morganHTTP 요청 로깅을 위한 미들웨어. helmet보안을 위한 각종 HTTP 헤더 설정을 도와주는 미들웨어. body-parser들어오는 요청의 body를 파싱해서 req.body 속성에 넣어주는 미들웨어. cookie-parser쿠키 헤더를 파싱해서 req.cookies에 넣어주는 미들웨어.","link":"/2020/04/28/TIL-Babel-Middlewares/"},{"title":"[TIL] &#96;append&#96; VS &#96;appendChild&#96;, .babelrc.json VS babel.config.json, 웹 레이아웃 구성 방법","text":"append VS appendChild||ParentNode.append()|Node.appendChild()||추가 가능 객체|Node &amp; DOMString|Only Node||반환값|없음|추가한 노드 객체||여러 객체 추가|가능|불가능| DOM StringUTF-16 문자열. Javascript의 String도 UTF-16 문자열임. 참고 ParentNode.append() | MDN Node.appendChild() | MDN .babelrc.json VS babel.config.json Monorepo를 사용하는가? node_modules를 컴파일 하고싶은가? 1당신을 위해 babel.config.json이 있다! 당신 프로젝트의 한 부분에만 적용할 설정이 있는가? 1당신을 위해 .babelrc.json이 있다! from Configure Babel | Babel 웹 레이아웃 구성 방법 &lt;table&gt; 태그 &lt;iframe&gt; 태그 CSS float property CSS Flexbox CSS Grid Layout 일단 내가 카톡 클론 수업에서 배운 것은 Flexbox임(table과 iframe은 옛날에 배움). CSS Grid Layout도 공부해봐야겠음. 참조 웹 레이아웃 기술 발전사 | CSS Grid Layout Guidebook","link":"/2020/04/29/TIL-append-VS-appendChild-babelrc-VS-babel-config-%EC%9B%B9-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B5%AC%EC%84%B1-%EB%B0%A9%EB%B2%95/"},{"title":"[TIL] &#96;export&#96;","text":"export자바스크립트 모듈에서 함수, 객체, 원시값을 내보낼 때 사용. 내보낸 것들은 import로 가져와 쓸 수 있음. 내보내는 모듈은 무조건 엄격 모드(Strict Mode)임. Named Export12345678910111213141516// 변수가 var, let, const 중 무엇이든// 초기화 됐든 안됐든, 하나든 여러개든 상관없음.export const var1, var2 = 2;export let var3, let var4 = 4;export function fn1() {}export class ClassName {}export const obj = {prop1: 1, prop2: 2}// 한꺼번에 내보내기export {var1, var2};// 이름 바꿔서 내보내기export {var3 as exportedName1, var4 as exportedName2};// 비구조화 내보내기export const {prop1, prop3: 3} = obj; 한 모듈에서 여러가지를 내보낼 수 있음. 단, 가져갈 때 내보낸 이름과 동일한 이름을 사용해야함. Default Export1234// 클래스, 객체, 함수 등 모두 적용 가능export default expression; // 변수 선언 같은 것은 안됨.export default function () {}export default {var1 as default}; 한 모듈에서 기본 내보내기는 하나만 가능. 가져올 때 어떤 이름으로 가져오든 무관함. Re-exporting1234export * from &quot;someModule1.js&quot;; // default는 내보내지지 않음.// export * as newName1 from &quot;someModule1.js&quot;; // 이건 안됨...export { name1, name2 as newName2 } from &quot;someModule1.js&quot;;export { default } from &quot;someModule1.js&quot;; // default만 내보내짐. import 할 필요없이 바로 다른 모듈을 가져와서 내보낼 수 있음.","link":"/2020/05/05/TIL-export/"},{"title":"[TIL] Strict Mode, Destructuring Assignment, Expression VS Statement","text":"엄격 모드(Strict Mode)123// 파일 최상단 or 함수 최상단&quot;strict mode&quot;; ECMAScript 5에서 소개됨. 기존에 암묵적으로 용인되고있던 에러나 실수에 엄격해지는 모드. 기존에는 조용히 무시되던 에러들을 throwing합니다. JavaScript 엔진의 최적화 작업을 어렵게 만드는 실수들을 바로잡습니다. 가끔씩 엄격 모드의 코드는 비-엄격 모드의 동일한 코드보다 더 빨리 작동하도록 만들어집니다. 엄격 모드는 ECMAScript의 차기 버전들에서 정의 될 문법을 금지합니다. from Strict mode | MDN} Javascript 모듈의 전체 컨텐츠는 자동적으로 엄격 모드가 적용됨. 구조 분해 할당(Destructuring Assignment)배열이나 객체를 해체하여 내뷰 요소들의 값을 개별 변수에 담을 수 있게 하는 자바스크립트 표현식 배열1234567const x = [1, 2, 3, 4, 5];const [y, z] = x; // 1, 2 : 기본 할당const a, b, c;[a, b, c] = x; // 1, 2, 3 ; 선언 분리 할당[, , , a, b] = x; // 4, 5 : 반환값 무시[a = 0, b = -1, c = -2] = [1, 2] // 1, 2, -2 : 기본값 설정[a, ...b] = x; // 1, [2, 3, 4, 5] : 나머지 할당 기본값은 값이 없어서 undefined가 될 경우 사용됨. 객체123456789const o = {p: 2, q: true, r: &quot;text&quot;};const {p, q} = o; // 2, true : 기본 할당const a, b;({a, b} = {a: 4, b: &quot;text&quot;}); //선언 분리 할당const {p: f, q: g} = o; // f = 2, g = true : 새로운 변수 이름으로 할당const {p, q, r = 5} = o; // 2, true, 5 : 기본값const {p: pp, q: qq = 6} = {p: 1}; // pp = 1, qq = 6 : 새 변수 이름 + 기본값const {p, ...rest} = o // p = 2, rest = {q: true, r: &quot;text&quot;} : 나머지 할당({'fizz-buzz': fizzBuzz} = {'fizz-buzz': 1}); // 식별자 명으로 부적합한 속성명 기본값은 값이 없어서 undefined가 될 경우 사용됨. 속성 이름이 변수명으로 유효하지 않을 경우, 대체할 유효한 변수명으로 대체해야함. 함수 매개변수의 기본 값 설정1234function fn1({p = 1, q = [2, 3], r = {s: 4}} = {}) { ... }function fn2({p = 1, q = [2, 3], r = {s: 4}}) { ... }fn1(); // 정상 실행fn2(); // 타입 에러 발생 : Uncaught TypeError: Cannot read property 'p' of undefined fn1의 함수 선언 파라미터를 보면 죄변에 구조분해, 우변에 빈 객체를 할당함. 이렇게 빈 객체를 할당하면 매개변수 없이 함수 호출이 가능하지만, 할당하지 않으면 에러 발생. 적어도 하나의 인자(꼭 객체일 필요는 없음)가 제공되어야함. Expression과 Statement의 차이개인적으로 둘 의 차이는 if문과 삼항 연산자를 비교할 때 잘 드러난다고 생각함. Expression단일값으로 환원될 수 있는 코드(변수명, 연산자, 함수 호출 등)로 이뤄진 식. 이 단일값을 도출하는 행위를 계산(Evaluate)이라고 함. 다른 곳에 영향을 주지 않고 단일값을 반환함. Expression 자체로는 실행이 되지 않고, 이를 Statement의 일부로 만들어야 실행이 가능함. Statement실행가능한(Executable) 최소한의 독립적인 코드 조각. Statement는 Expression과 다르게 단일값으로 환원되지 않고, 다른 곳에 영향을 줌. “함수 호출의 경우 반환값이 있으면 단일 값으로 환원되지 않느냐?” 라는 말이 있을 수 있다. 이는 함수 호출이 Expression 관점에서는 단일 값으로 환원됐다고 볼 수 있으나, 결과적으로 반환된 값으로 구성된 Statement를 생각해보면 Statement는 단일 값으로 환원도 반환도 없다는 것을 알 수 있다.","link":"/2020/05/08/TIL-Strict-Mode-Destructuring-Assignment-Expression-VS-Statement/"},{"title":"[TIL] Pug, Express Middleware 순서, &#96;res.locals&#96;","text":"Pug(구 Jade)템플릿 엔진. Haml에 강한 영향을 받음. HTML 태그의 반복성을 인덴트로 대체해 표현. 이 외에도 다양한 조건, 반복, 상속 등 다양한 기능을 제공해줌. 오류 경험예제 실행을 위해 p Hello를 작성했는데 동작을 안함. 렌더링된 결과에 &lt;p&gt;Hello&lt;/p&gt;가 아닌 p Hello가 그대로 나왔음. 그래서 다시 살펴보니 앞에 인덴트가 실수로 추가되서 렌더링이 제대로 되지 않았던 것이었음. extends &amp; block1234567//- layout.pughtml head block scripts script(src='/jquery.js') body block contents 1234//- page.pugextends layoutblock contents p Contents extends 키워드로 부모의 내용을 상속받을 수 있고, 부모에 선언된 block들을 자식이 대체할 수 있음. 페이지 구조 같은 것을 상속해서 내용을 바꿔넣는 방식으로 사용 가능. block은 대체 외에도 append, prepend 키워드를 이용해 앞 뒤로 추가할 수 있음. 참조 Template Inheritance - Pug include123//- footer.pug.footer p Copyright CopyX 1234567//- layout.pughtml head title Layout body block contents include footer include 키워드로 한 파일을 다른 파일에 끼워넣을 수 있음. 페이지 구조를 나눠서 관리 할 수 있음. 참조 Includes - Pug Express 미들웨어 순서설정되는 순서대로 실행됨. 보안을 위한 미들웨어처럼 먼저 실행되야하는 것을 위로 올려야함. res.localsExpress에서 제공되는 Response 객체의 속성 중 하나. 응답을 위한 지역변수를 담고있는 객체. 뷰에서만 사용 가능. 요청/응답 수준에서 필요한 정보를 넘겨주는 것에 유용함. 비슷한 것으로 app.locals가 있으며, 이는 애플리케이션 범위에서 사용 가능함.","link":"/2020/05/09/TIL-Pug-Express-Middleware-%EC%88%9C%EC%84%9C-res-locals/"},{"title":"[TIL] DRY, KISS, YAGNI, SSOT","text":"DRY Don’t Repeat Yourself 반복을 하지마라. 개인과 팀 범위, 일과 코드가 중복되는 것들을 관리해서 개발 및 유지보수의 효율을 높이자는 의미.DRY를 위반한 상태가 WET(We Enjoy Typing 또는 Write Everything Twice). KISS Keep It Simple, StupidKeep It Small and SimpleKeep It Short and Simple 가능한 작고 간단하게 설계하고 만드는게 좋다. YAGNI You Ain’t Gonna Need It 확실하게 필요하다고 판단되기 전까지 구현하지 마라. SSOT Single Source Of Truth 여러 곳에서 사용되는 정보를 한 곳에 모아서 관리하는 방식. 데이터에 변경이 생길 경우 한 곳에서만 수정해도 모든 곳에서 적용되도록 데이터는 한 곳에서 관리하고, 데이터를 사용하는 곳에서도 데이터 원본을 복사가 아닌 참조로 사용해 과거 버전이나 부정확한 데이터를 사용하지 않도록 방지함.","link":"/2020/05/10/TIL-DRY-KISS-YAGNI-SSOT/"},{"title":"[TIL] Form action &amp; method, Pug Iteration, Pug Mixin, HTML Video Tag","text":"Form action &amp; method12345&lt;form action=&quot;/users/login&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;id&quot; /&gt; &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;Login&quot; /&gt;&lt;/form&gt; 웹페이지에서 정보를 입력받을 때 사용하는 &lt;form&gt; 태그. action 속성은 이 정보를 넘겨줄 URI를, method 속성은 넘겨줄 때 사용할 HTTP 메소드(put, post 등)을 설정 가능. method를 get으로 설정하면 입력값들이 http://url.url?name=vale&amp;name2=value2와 같은 형식으로 전달됨. post는 데이터가 body(요청 본문)에 담겨저 전달됨. Pug Iteration123each item in items h1= item.title p= item.description each와 in 키워드를 이용해서 반복 가능. 반복의 대상은 자바스크립트임. 그래서 변수나 함수 결과 등 다양한 것을 사용할 수 있음. Iteration - Pug Pug Code템플릿에서 인라인 자바스크립트를 실행시킬 수 있는 세 가지 방법 Unbuffered Code | - | 코드는 실행되지만 그 결과가 바로 추가되지 않음Buffered Code | = | 코드의 실행결과가 바로 추가되고, HTML 태그들은 모두 이스케이핑됨.Unescaped Buffered Code| != | 코드의 실행결과가 바로 추가되고, HTML 태그들은 모두 이스케이핑되지 않음. 123456p - &quot;text&quot; + &quot;&lt;tag&gt;&quot;=&gt; &lt;p&gt;&lt;/p&gt;p = &quot;text&quot; + &quot;&lt;tag&gt;&quot;=&gt; &lt;p&gt;text&amp;lt;tag&amp;gt;&lt;/p&gt;p != &quot;text&quot; + &quot;&lt;tag&gt;&quot;=&gt; &lt;p&gt;text&lt;tag&gt;&lt;/p&gt; Code - Pug escape - 생활코딩 Pug Mixin12345// videoBlock.pugmixin videoBlock(video = {}) .container h4= video.title h6= video.views 12345// videos.puginclude mixins/videoBlockeach video in videos +videoBlock(video) 함수 형태로 사용 가능한 Block. 템플릿을 작은 단위로 쪼개서 사용. mixin의 인자에는 기본값 설정이 가능하며, 나머지 인자(...args)도 사용 가능하다. 인자 외에도 태그를 추가할 때 처럼 attributes 설정이 가능하며, 이를 mixin 내에서 가져가 쓸 수 있다. 1234mixin foo(a, b) p(class!=attributes.class)= a + b+foo(1, 2)(class=&quot;number&quot;) Mixins - Pug 궁금증근데 수업에서는 +videoBlock(video)로 안하고 +videoBlock({title: video.title})로 하던데? 왜 그러는거지? 스스로 생각해본 이유어떤 객체를 인자로 받는 함수를 만들어서 사용한다고 할 때, 외부에서 인자의 형태에 맞춰서 함수에 넘겨주는 것과 함수를 들어오는 인자에 맞게 수정하는 것을 생각해보면 전자가 더 에러가 일어날 확률이 적을 것으로 생각된다. 사실 위 케이스에서는 이미 객체 자체가 함수의 인자와 같은 형태지만, 의도적으로 인자에 맞춰 대입하는 것이라고 볼 수 있다. HTML Video Tag1&lt;video src=&quot;...&quot; controls=&quot;true&quot;&gt;&lt;/video&gt; 비디오를 재생시킬 수 있는 미디어 플레이어를 문서에 삽입하는 태그. autoPlay, controls 등 다양한 속성들이 지원됨. &lt;video&gt; - HTML | MDN","link":"/2020/05/12/TIL-Form-action-method-Pug-Iteration-Pug-Mixin-HTML-Video-Tag/"},{"title":"[TIL] CSS &#96;position&#96;, &#96;flex&#96;, &#96;font-weight&#96;","text":"카카오 클론 2주 챌린지 3일차 과제를 하며 배운 복습하게 됐거나 새로 알게된 내용들. CSS position대충 position 속성에 어떤 값들을 넣을 수 있고, 각 값들이 어떤 의미인지 정도만 희미하게 알고 있었음. 그런데 막상 사용해보려니 헷갈려서 다시 알아보게됨. 위치 비지정 요소 : static 위치 지정 요소 상대 위치 지정 요소 : relative 절대 위치 지정 요소 : absolute, fixed 끈끈한 위치 지정 요소 : sticky 값 문서 흐름 레이아웃 공간 배정 top, right, bottom, left 오프셋 적용 기준 z-index static 따라서 배치 O X X relative 따라서 배치 O 자기 자신 auto가 아니면 새로운 쌓임 맥락 생성 absolute 제거됨 X 가까운 위치 지정 조상 요소. 없으면 초기 컨테이닝 블록 auto가 아니면 새로운 쌓임 맥락 생성 fixed 제거됨 X 뷰포트의 초기 컨테이닝 블록 기준 위치에 배정 항상 새로운 쌓임 맥락 생성 sticky 따라서 배치 O 가장 가까운 스크롤되는 조상과 컨테이닝 블록 항상 새로운 쌓임 맥락 생성 참고: position - CSS | MDN CSS flexdisplay: flex를 설정해서 자식들의 위치를 정렬하는 법은 알았지만, 자식에 flex: ?를 설정해서 크기를 설정하는 방법은 기억이 나지 않았음. 123h1 { flex: &lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;;} flex 속성을 통해 flex-grow, flex-basis, flex-shrink 설정 가능. flex-grow|&lt;number&gt;, Global values|flex-container 요소 내부에서 할당 가능한 공간의 비율flex-basis|&lt;width&gt;, content|flex-item의 메인축 방향 초기 크기 지정. (auto가 아닌 flex-basis는 width또는 height 보다 우선됨.)flex-shrink|&lt;number&gt;, Global values|flex-item의 크기가 flex-container 보다 클 때 flex-shrink 사용해 내부 요소의 크기가 축소됨. 값의 크기는 축소되는 비율. Global values12345h1 { flex: inherit; flex: initial; flex: unset;} Content values컨텐츠 크기에 따라 자동으로 크기가 변함. 123456h1 { flex-basis: fill; flex-basis: max-content; flex-basis: min-content; flex-basis: fit-content;} 참고: flex - CSS | MDN CSS font-weight이건 자꾸 왜 font-style이랑 헷갈리지… 😓 글씨 굵기를 설정할 수 있는 속성. 123h1 { font-weight: normal | bold | bolder | lighter | &lt;number&gt;;}","link":"/2020/05/13/TIL-CSS-position-flex-font-weight/"},{"title":"디렉토리 이동 시 Node.js 버전 자동 변경 방법","text":"개인적으로 파이썬을 공부하며 Pyenv, Virtualenv, Autoenv를 알게됐다.이 중 Autoenv가 제공하는 “디렉토리 변경 시 .env 파일 자동 실행” 기능이 너무 마음에 들어서 NVM과 함께 써보려고 했는데…Node.js 라이브러리 중 dotenv에서 사용하는 환경변수 저장 파일과 이름이 같다!😭그래서 NVM에서 제공하는 기능은 없는지 찾아보게됨. https://github.com/nvm-sh/nvm#deeper-shell-integration Deeper Shell IntegrationYou can use avn to deeply integrate into your shell and automatically invoke nvm when changing directories. avn is not supported by the nvm development team. Please report issues to the avn team. If you prefer a lighter-weight solution, the recipes below have been contributed by nvm users. They are not supported by the nvm development team. We are, however, accepting pull requests for more examples. 위 기능을 사용할 수 있는 2가지 찾음. 추가 방법1. avn 설치nvm, n, nodebrew 모두 지원. npm으로 관리. 2. 쉘에 스크립트 추가bash, zsh, fish의 설정파일에 추가해 사용할 수 있는 간단한 스크립트. nvm팀에서 관리하는 것이 아닌 nvm 사용자들이 관리하고 있으며, nvm팀은 이를 풀리퀘스트로 받아 공개만 해놓음. 나는 zsh이라 해당 스크립트만 가져옴. 123456789101112131415161718192021# place this after nvm initialization!autoload -U add-zsh-hookload-nvmrc() { local node_version=&quot;$(nvm version)&quot; local nvmrc_path=&quot;$(nvm_find_nvmrc)&quot; if [ -n &quot;$nvmrc_path&quot; ]; then local nvmrc_node_version=$(nvm version &quot;$(cat &quot;${nvmrc_path}&quot;)&quot;) if [ &quot;$nvmrc_node_version&quot; = &quot;N/A&quot; ]; then nvm install elif [ &quot;$nvmrc_node_version&quot; != &quot;$node_version&quot; ]; then nvm use fi elif [ &quot;$node_version&quot; != &quot;$(nvm version default)&quot; ]; then echo &quot;Reverting to nvm default version&quot; nvm use default fi}add-zsh-hook chpwd load-nvmrcload-nvmrc 위 스크립트를 ~/.zshrc에 추가하고 원하는 디렉토리에 .nvmrc 파일을 생성하면 사용 가능. 12// .nvmrc12.19.0 .nvmrc 파일에는 12.19.0 처럼 원하는 버전만 넣어놓으면 된다.그리고 디렉토리에 진입하면! 디렉토리에서 벗어날 때는 nvm에 설정된 default 버전으로 돌아간다.","link":"/2020/10/19/%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%9D%B4%EB%8F%99-%EC%8B%9C-Node-js-%EB%B2%84%EC%A0%84-%EC%9E%90%EB%8F%99-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EB%B2%95/"},{"title":"FontAwesome 사용 시 helmet의 Content Security Policy 설정 방법","text":"Express.js를 사용해 웹사이트를 만들던 중 Font Awesome 아이콘이 로딩되지 않는 오류가 발생했다. 브라우저 콘솔에서 확인한 오류 메시지는 다음과 같았다. Refused to load the script ‘https://kit.fontawesome.com/xxxxxxxxxx.js' because it violates the following Content Security Policy directive: “script-src ‘self’”. Note that ‘script-src-elem’ was not explicitly set, so ‘script-src’ is used as a fallback. Content Security PolicyContent Security Policy는 Cross Site Scripting 같은 공격을 방어하기 위한 정책이다. 핵심은 공격자가 사이트에 악성코드를 심지 못하도록 신뢰할 수 있는 컨텐츠 소스 허용목록을 Content Security Policy HTTP 헤더에 명시해 브라우저에게 알려주는 것이다. 내 경우에는 아이콘 자동추가를 위해 Font Awesome에서 제공하는 스크립트가 CSP를 위반한 것이었다. First Try: 공식 홈페이지의 방법이라면!먼저 Security | Font Awesome에서 찾은 해결방법을 적용해봤다. 12345678910&lt;head&gt; &lt;script src=&quot;https://use.fontawesome.com/releases/v5.15.1/js/all.js&quot; data-auto-add-css=&quot;false&quot; &gt;&lt;/script&gt; &lt;link href=&quot;https://use.fontawesome.com/releases/v5.15.1/css/svg-with-js.css&quot; rel=&quot;stylesheet&quot; /&gt;&lt;/head&gt; 헤더에 CSS 자동 추가를 하지않는 스크립트와 CSS를 연결하는 방식이었다. 그러나 이 스크립트 또한 CSP를 위반했다는 오류 메시지를 확인할 수 있었다. Second Try: 그렇다면 이번에는 구글링이다!다음으로 구글링을 통해 찾은 meta 태그를 이용해 CSP를 설정하는 방법을 시도했다. 1234&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src 'self' data: gap: https://*.googleapis.com/ https://*.fontawesome.com/ https://*.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com/ https://*.fontawesome.com/; media-src *; img-src 'self' data: content:; &quot;/&gt; 하지만 이 방법 또한 CSP 위반 오류메시지를 출력하길래 브라우저의 분석도구를 이용해 HTTP Header를 확인해봤다. 그런데 meta 태그로 설정한 부분이 하나도 적용되지 않고있었다. Finally: 어라?! 그러고보니…HTTP Header에 설정된 보안 관련 항목들을 살펴보다 문득 이런 생각이 들었다. '이건 어디서 설정하고 있는거지? 기본적으로 설정되는 건...' 여기까지 생각이 미치자 Express에 셋팅해놓은 보안용 미들웨어 helmet이 생각났다. https://helmetjs.github.io/를 확인해보니 기본적으로 CSP가 셋팅되고 있었다. helmet 옵션에 Font Awesome 적용을 위해 필요한 소스를 추가했고, 아이콘들이 정상적으로 출력되는 것을 확인할 수 있었다. 123456789101112app.use( helmet({ contentSecurityPolicy: { directives: { defaultSrc: [&quot;'self'&quot;], scriptSrc: [&quot;'self'&quot;, &quot;https://*.fontawesome.com/&quot;], styleSrc: [&quot;'self'&quot;, &quot;https://*.fontawesome.com/&quot;], fontSrc: [&quot;'self'&quot;, &quot;https://*.fontawesome.com/&quot;], }, }, })); Retrospective👍 CSP의 개념을 잘 익힐 수 있었다. HTTP Header를 분석해볼 수 있는 좋은 기회였다. 🤦 원인을 깊게 생각하지 않고 눈 앞의 솔루션들만 따라하니 시간낭비가 컸다. 🤔 HTTP 프로토콜에 대해 깊이 공부할 필요를 느꼈다.","link":"/2020/10/22/FontAwesome-%EC%82%AC%EC%9A%A9-%EC%8B%9C-helmet%EC%9D%98-Content-Security-Policy-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95/"},{"title":"[TIL] multer, multipart&#x2F;form-data, enctype, 멱등성 등","text":"multer파일 업로드를 위해 사용하는 multipart/form-data를 다루기 위한 미들웨어.form의 enctype 속성이 multipart/form-data일 때만 동작함. multipart/form-data는 뭐야?post 요청으로 서버에 데이터를 전송하는 경우, Content-Type은 &lt;form&gt; 요소의 enctype 속성이나 &lt;input&gt;, &lt;button&gt; 요소의 formenctype 속성의 값으로 결정됨. application/x-www-form-urlencoded: 기본값. 우리가 아는 URL 인코딩. multipart/form-data: 파일, 바이너리 데이터. 인코딩하지 않음.서버로 데이터 전송 시 여러 타입의 데이터를 보내는 경우도 있음. 이를 위해 multipart가 생김. text/plain: 공백만 ‘+’로 변환, 나머지는 그대로. (HTML5에서 디버깅용으로 추가된 값이라고 MDN에 나옴) 멱등성요청을 한 번 보내든 여러번 보내든 효과가 같음. 서버의 상태도 동일하게 남음.올바르게 구현한 GET, HEAD, PUT, DELETE는 멱등성을 가짐. POST는 멱등성을 갖지 않음. mongoose.Schema.Types.ObjectId와 mongoose.Types.ObjectId의 차이는?mongoose.Types.xxx는 MongoDB의 해당 타입을 상속받아 사용하는 타입.mongoose.Schema.Types.xxx는 Mongoose의 Schema에서 각 Property들을 설정하기 위한 객체. 즉, 스키마 전용. 왜 arrow function에 async 키워드를 사용하니까 eslint에 걸릴까?내가 설정한 parserOptions의 ecmaVersion이 7(2016년)으로 되어있었는데, async/await는 8(2017년)부터 적용됨. 참고 POST - HTTP | MDN &lt;form&gt; - HTML | MDN &lt;form&gt; 태그의 enctype 속성 | TCP School multipart/form-data 타입의 HTTP 메시지 구성 방법 | Wireframe 멱등성 - 용어 사전 | MDN What is a SchemaType? | Mongoose expressjs/multer | Github","link":"/2020/10/24/TIL-multer-multipart-form-data-enctype-%EB%A9%B1%EB%93%B1%EC%84%B1-%EB%93%B1/"},{"title":"[TIL] hr 태그, SVG, findOneAndUpdate VS findOneAndRemove, Webpack","text":"hr 태그가 뭐지?간단히 말하면 가로줄(HoRizontal) 태그. 이야기 장면 전환, 구획 내 주제 변경 등 문단 레벨 요소에서 주제의 분리를 나타냄. SVG 편집을 처음 해봄! 신기하네…블로그에 사용할 Logo와 Favicon 이미지를 고민하다 SVG를 만들어서 사용함. 우연히 현재 테마의 기본 Favicon으로 설정된 SVG를 VSCode로 까보게 됐는데, 상상과는 달리 XML 형식이었음. 전에 FontAwesome에서 아이콘을 다운로드 했을 때도 SVG 파일인 것을 기억하고 있었고, 이를 조합해 사용할 수 있겠다는 생각이 들었음. 그래서 간단히 SVG 튜토리얼을 보며 서버 아이콘과 체크 아이콘을 합침. 재밌는 경험이었음.😋 mongoose findOneAndDelete와 findOneAndRemove의 차이점은?주로 Node.js MongoDB Driver의 findAndModify 메소드 사용 여부에 달려있었음. mongoose findOneAndUpdate ⇒ mongodb findAndModify의 update 명령 mongoose findOneAndRemove ⇒ mongodb findAndModify의 remove 명령 mongoose findOneAndDelete ⇒ mongodb findOneAndDelete 명령 findAndModify는 하나의 문서를 찾아서 수정하고 이를 반환하는 메소드. 다양한 옵션을 설정할 수 있어서 문서의 수정, 삭제 등은 물론이고 반환하는 문서를 수정하기 전/후로 구분해서 반환받을 수도 있음. 단, Mongoose DB 연결 시 useFindAndModify 옵션을 true로 설정해야 findAndModify를 사용함. false면 findOneAndXXX 사용함. 현재 Node.js MongoDB Driver에서 findAndModify는 deprecated됨. 그래서 Mongoose는 useFindAndModify: false로 설정하는 것을 권장함. 왜 deprecated 됐을까?findAndModify는 하나의 문서를 수정하고 이를 반환하는 메소드임. 그런데 이름만으로는 이 동작(수정, 삭제, 반환 등)들을 모두 알기 힘듦. 다재다능하지만 한 눈에 알아보기 힘들고 복잡한 친구임. findOneAndUpdate, findOneAndDelete, findOneAndReplace는 상대적으로 이름이 기능에 대해 훨씬 잘 나타냄. 주의: Node.js MongoDB Driver에서만 deprecated된 것이고 Mongo Server/Client 등에서는 여전히 사용 가능. 다른 드라이버는 확인 필요. Webpack이란?Bundler. Bundle이 “묶음”이라는 의미이므로 “묶음으로 만들어주는 도구”라고 보면 될 듯.모듈 개념이 없던 시절에는 여러 자바스크립트 파일을 브라우저에 로딩하면 그만큼 네트워크 비용을 치뤄야했음. 거기에 변수 충돌의 위험도 있었음. 스코프로 인한 충돌 위험은 즉시호출함수(IIFE)를 이용한 모듈이나 CommonJS 혹은 AMD 스타일의 모듈 시스템을 이용해 극복할 수 있었으나, 여전히 여러 파일을 로딩하기 위한 네트워크 비용은 해결되지 않았음. 그래서 하나의 묶음(Bundle)로 만들기 위해 웹팩이 나오게됨. 웹팩은 시작점(Entry point)로부터 연결된 모듈을 전부 찾아내 한 묶음으로 만들어냄. Javascript와 Json만 이해하는 웹팩은 로더를 이용해 이미지, 폰트, 스타일시트 등 다른 파일을 자바스크립트 코드 안으로 가져올 수 있음. 자주 사용되는 로더로는 css-loader, style-loader, file-loader, url-loader 등이 있음. 플러그인은 파일별로 처리하는 로더와 다르게 번들된 결과물을 처리함. Webpack config에서 module.rules의 use에 추가한 로더들이 왜 역순으로 실행될까?이유는 아직 못찾음… 왜지? 참고 - HTML | MDN SVG Tutorial 프론트엔드 개발환경의 이해: 웹팩(기본) | 김정환 블로그 웹팩의 기본 개념 | 김정환 블로그","link":"/2020/10/25/TIL-hr-%ED%83%9C%EA%B7%B8-SVG-findOneAndUpdate-VS-findOneAndRemove-Webpack/"},{"title":"[TIL] inline VS inline-block, flexbox, babel-polyfill, sass, destructuring의 장점","text":"어떤 기술이 어떤 문제를 해결했나? 이게 그 기술을 배워야 할 이유를 말한다. CSS inline과 inline-block의 차이는?사용할 수 있는 property가 달라진다. flexbox는 왜 나왔지? inline-block으로 요소들을 한 줄에 놓았는데, 요소들 사이에 알 수 없는 간격이 생겼다. 여러 요소들을 한 줄 안에서 창 크기에 맞춰 위치 시키고 싶은데, 간격을 조정하면 기기 화면 크기에 맞춰서 여러 버전을 만들어야 한다. About flexbox부모 컨테이너에 display: flex를 설정. main-axis, cross-axis 개념기본은 수평이 main-axis. main-axis와 수직으로 교차된 축이 cross-axis.flex-direction 속성을 column으로 설정하면 main-axis가 수직이 됨.요소를 배치하는 방향은 좌-&gt;우, 상-&gt;하가 기본. 이건 축 방향이 바뀌어도 마찬가지이며, -reverse 어미가 들어간 방향만 뒤집어짐. justify-content는 main-axis, align-items는 cross-axis를 축으로 이동시킴.space-between, space-around, space-evenly는 justify-content 속성에만 사용 가능. babel-polyfill브라우저에 부족한 코드를 채워주는 모듈. ES2015+ 환경을 모방할 수 있게 도와준다. promise나 async/await를 쓸 수 있게 만들어줌. SassSass에서 파일명 앞에 ‘_‘(underscore)를 붙이면 partial 파일로 인식함. 이 파일은 CSS 파일이 생성되지 않음. @use 키워드로 사용. 그런데 왜 수업에서는 @import로 사용하지?흠… 강사님도 그냥 무심코 @import를 사용하신 것 같다. 왜 @use를 권장하지? What’s Wrong With @import?The @import rule has a number of serious issues: @import makes all variables, mixins, and functions globally accessible. This makes it very difficult for people (or &gt; tools) to tell where anything is defined. Because everything’s global, libraries must prefix to all their members to avoid naming collisions. @extend rules are also global, which makes it difficult to predict which style rules will be extended. Each stylesheet is executed and its CSS emitted every time it’s @imported, which increases compilation time and &gt; produces bloated output. There was no way to define private members or placeholder selectors that were inaccessible to downstream stylesheets. The new module system and the @use rule address all these problems. @import는 가져온 모든 변수, 믹싱, 함수들을 전역에 둬서 충돌을 일으킬 수 있고, 라이브러리에 프리픽스를 사용하게 만들며, @import를 사용하는 모든 부분에 스타일시트를 실행시켜 컴파일 시간을 늘리고 부풀려진 결과물을 내놓고, private members를 선언하지 못하며 placeholder 선택자를 사용할 수 없음. Sass팀은 몇 년 내로 @import를 Sass에서 없앨 계획. 부모참조선택자 &amp;Sass에서 사용하는 특수선택자. 이전까지 중첩된 모든 상위 부모 선택자를 나타냄. Destructuring의 장점은?원래라면 가져오고싶은 값 별로 한 줄 한 줄 변수에 할당하며 가져와야하지만, destructuring을 이용해 한 줄로 가져오는 것이 가능. 참고 Sass: Sass Basic - Partials Sass: @use [CSS] SCSS에 새로 추가된 Module System (@use, @forward) | bono’s blog Sass: Parent Selector","link":"/2020/10/26/TIL-inline-VS-inline-block-flexbox-babel-polyfill-sass-destructuring%EC%9D%98-%EC%9E%A5%EC%A0%90/"},{"title":"[TIL] flexbox, Cookie, passport.js","text":"왜 flexbox에서 justify-self는 동작을 안하지?찾아보니까 justify-self는 레이아웃 모드에 따라 다르게 동작함. block-level: containing block에 맞게 동작 absolutely-positioned: offset 값으로 설명되는 containing block table: 무시 flexbox: 무시 grid: 그리드 범위 내 align-self요소 자신의 cross-axis 위치를 설정 order요소 자신의 순서를 변경. 기본 값은 0 flex-wrapflexbox에서 한 줄의 요소 수가 늘어나서 공간이 모자르면 기본적으로 요소의 크기를 변경함. 무조건 한 줄 안에 들어가도록 만듦. 이 때 요소의 크기를 보존하면서 줄 바꿈이 되도록 하는 속성이 flex-wrap. align-contentalign-items가 각 줄 별 요소들의 cross-axis 위치를 정하는 거라면, align-content는 여러 줄의 요소들과 빈 공간을 한꺼번에 제어하는 속성. justify-content의 space-around 같은 속성도 적용 가능. flex-shirinkmain-axis 공간이 모자라서 요소들이 찌그러질 때 찌그러지는 비율을 설정할 수 있음. 기본값이 1이며 2로 설정하면 다른 요소들보다 2배 더 많이 찌그러짐. flex-growmain-axis 공간이 남을 때 flex-grow가 설정된 요소가 그 공간을 가져가서 커짐. 여러 요소들에 설정되어 있다면 그 비율대로 가져감. flex-basismain-axis 방향에서 요소들의 기본 크기를 설정해주는 속성. flex-flowflex-direction과 flex-wrap을 함께 설정할 수 있는 속성. 1234.something { display: flex; flex-flow: row wrap;} resize요소의 크기 조정 가능 여부를 설정하는 속성. (예: textarea)인라인 요소나 overflow 속성이 visible로 설정된 블록 요소는 적용 불가. Cookie란? 어떠한 웹사이트를 방문할 경우 그 사이트가 사용하고 있는 서버를 통해 인터넷 사용자의 컴퓨터에 설치되는 작은 기록 정보 파일. 같은 웹사이트를 방문할 때마다 읽히고 수시로 새로운 정보로 바뀐다. 요청과 함께 백엔드로 전송될 정보. 작아야하고, 민감한 정보를 담으면 안됨. passport.js? Simple, unobtrusive authentication for Node.js Node.js를 위한 인증 미들웨어. 다양한 Strategy를 통해 로컬 인증은 물론 Facebook, Github 등을 지원함. Strategy?각각의 인증 대상(Local, Facebook 등)별로 인증 매커니즘을 구현해 패키징한 모듈. 이를 통해 인증에 필요한 로직을 직접 구현할 필요 없이 Strategy만 선택해 사용하면 됨. Session인증이 완료되면 브라우저의 쿠키셋을 이용해 세션을 유지함. serializeUser()쿠키에 저장할 정보 설정. 어떤 정보를 쿠키로 줄 수 있느냐? ⇒ 브라우저가 사용자에 대해 어떤 정보를 가질 수 있나? deserializeUser()쿠키 정보를 가져와 유저를 검색 =&gt; 어떻게 유저를 찾을 것인가? 서버가 꺼져도 세션은 유지되어야 한다!그러려면 DB에 저장해야지! connect-mongo를 이용해 MongoDB를 이용한 Session Store를 만들고 관리한다! 참고 justify-self - CSS | MDN resize - CSS | MDN HTTP 쿠키 - 위키백과 Documentation | Passport.js","link":"/2020/10/27/TIL-flexbox-Cookie-passport-js/"},{"title":"[TIL] CSS Grid가 생긴 이유, fit-content, grid-template-areas","text":"왜 CSS에 grid가 생겼을까? flexbox로 그리드를 만들기 힘들다! flexbox로 화면 크기에 맞춰 균일한 간격으로 위치시킬 수는 있지만, 그리드 방식으로 줄의 나머지 공간을 기존 요소들과 같은 간격으로 남기면서 위치시킬 수는 없음. 자식 크기에 맞는 width 값을 설정하고 싶다면?max-width: fit-content; 혹은 max-width: max-content;. fit-content가 max-content와 동일함. grid-template-areas코드로 보이는 그리드 설정 방법 123456789101112.grid { grid-template-areas: &quot;header header header header&quot; &quot;content content content nav&quot; &quot;content content content nav&quot; &quot;footer footer . footer&quot; // .을 넣으면 그 공간은 비어있음.;}.header { grid-area: header;}","link":"/2020/10/28/TIL-CSS-Grid%EA%B0%80-%EC%83%9D%EA%B8%B4-%EC%9D%B4%EC%9C%A0-fit-content-grid-template-areas/"},{"title":"Content Security Policy와 Inline Styles","text":"CSP Inline StylesCSP를 활설화하면 인라인 스타일을 막음. 왜?공격자가 인라인 스크립트 태그를 주입해도 브라우저는 이를 올바른 스크립트 태그와 구별할 방법이 없음. 그래서 인라인 스크립트를 완전히 금지함. 인라인 스타일도 마찬가지. 인라인 스크립트 or 스타일을 사용해야하는 경우 지시문에 'unsafe-inline' 추가 1content-security-policy: script-src &quot;unsafe-inline&quot;; 지시문과 태그에 Nonce(일회용 임시값) 설정 123&lt;script nonce=&quot;EDNnf03nceIOfn39fn3e9h3sdfa&quot;&gt; //Some inline code I cant remove yet, but need to asap.&lt;/script&gt; 1content-security-policy: script-src &quot;nonce-EDNnf03nceIOfn39fn3e9h3sdfa&quot;; 지시문에 스크립트 자체의 Hash 추가 12content-security-policy: script-src &quot;sha256-qznLcsROx4GACP2dm0UCKCzCG-HiZ1guq6ZZDob_Tng=&quot;; Reference https://developers.google.com/web/fundamentals/security/csp?hl=ko","link":"/2020/11/10/Content-Security-Policy%EC%99%80-Inline-Styles/"},{"title":"[TIL] grid-column, grid-row, fr, grid-template, grid 요소 정렬","text":"grid-column, grid-rowstart와 end를 한 번에 설정할 수 있음. 12345.nav { grid-row: 1 / 3; grid-column: 2 / -1; // 음수를 넣으면 뒤에서부터 센 순서} 몇 칸을 차지하는지 표현하는 방법도 가능 1234.nav { grid-row: span 2; grid-column: span 5;} 위 둘을 혼용할 수도 있음. 123.nav { grid-row: 1 / span 2; grid-column: 2 / span 5; 각 셀의 앞/뒤에 위치한 구분선에 이름을 붙여줄 수도 있음. 12345678910.grid { display: grid; grid-template-columns: [first-line] 100px [second-line] 100px [third-line] 100px [fourth-line] 100px [fifth-line]; grid-template-rows: repeat(4, [line] 100px);}.header { grid-column: first-line / fifth-line; grid-row: line 1 / line 3;} fr(fraction: 부분)공간의 남은 부분은 비율로 나눔 1234.grid { display: grid; grid-template-columns: 1fr 1fr 1fr;} grid-templategrid-template-columns, grid-template-rows, grid-template-areas를 합친 속성 123456789.grid { height: 50vh; display: grid; gap: 10px; grid-template: &quot;header header header header&quot; 1fr &quot;content content content nav&quot; 2fr &quot;footer footer footer footer&quot; 1fr / 1fr 1fr 1fr 1fr;} grid의 셀 내부 요소들의 정렬그리드에서는 block-axis, inline-axis(row-axis) 두 가지 축을 사용함. block-axis는 열과 수평인 축, inline-axis는 행과 수평인 축임. 셀 내부 요소 정렬 시 justify-items, justify-self는 inline-axis 위에서의 위치, align-items, align-self는 block-axis 위에서의 위치를 설정함. 기본 값은 stretch로 설정되어 있음. place-items, place-self는 block-axis와 inline-axis를 한 번에 설정.","link":"/2020/10/29/TIL-grid-column-grid-row-fr-grid-template-grid-%EC%9A%94%EC%86%8C-%EC%A0%95%EB%A0%AC/"},{"title":"[TIL] grid-auto-rows, grid-auto-columns, minmax, auto-fill, auto-fit","text":"grid-auto-rows, grid-auto-columns그리드에 들어간 아이템의 수가 grid-template-* 속성들로 설정한 셀 수를 넘어갈 때 자동으로 적용되는 행, 열 크기를 설정하는 속성 minmax()repeat() 함수에서 셀 크기를 설정할 때 사용하는 함수. 셀의 최소, 최대 크기를 설정. auto-fill, auto-fitrepeat() 함수의 반복 수 설정에 사용하는 값. auto-fill은 남은 공간에 셀을 채워넣고, auto-fit은 남은 공간을 기존 셀들을 늘려서 맞춘다.","link":"/2020/10/30/grid-auto-rows-grid-auto-columns-minmax-auto-fill-auto-fit/"},{"title":"xcrun: error: invalid active developer path","text":"회사에서 지급받은 맥북 프로를 Bigsur로 업데이트했음.그런데 업데이트 전에 설치해놓은 direnv에서 에러가 발생함. 12xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrundirenv: Could not find python's version 업데이트하면서 xcrun의 패스가 끊긴 듯.구글링해보니 MacOS 업데이트 시 꽤나 빈번하게 일어나는 문제라고함. XCode CLI를 설치해주니 깔끔하게 해결됨. 1$ xcode-select --install","link":"/2021/01/13/xcrun-error/"},{"title":"CORS (Cross-Origin Resource Sharing)","text":"Origin이란?웹 컨텐츠의 출처(Origin)이란 접근에 사용되는 URL의 Scheme(Protocol), Host(Domain), Port로 정의됨. 위 세 가지가 같으면 같은 출처로 판단. 단, 포트가 80(HTTP 기본 포트)일 경우 생략되는 경우도 있음. Cross-Origin Request다른 출처에 요청을 보내는 것. 이런 요청은 출처에서 전송받은 특별한 헤더가 필요함. 웹 초기에는 보안을 위해 다른 사이트의 컨텐츠에 접근할 수 없었음. 그러자 사람들은 iframe과 form을 이용해 다른 사이트에 네트워크 요청을 보내는 트릭이나 script 태그를 이용한 트릭을 만들어 사용했고, 결국 브라우저에서 실행가능한 네트워크 관련 자바스크립트 메서드가 추가됨. 처음에는 크로스 오리진 요청이 불가능했으나, 서버에서 명시적으로 크로스 오리진 요청에 대한 허가 여부 헤더를 받았을 때만 가능하도록 제약을 걸고 허용함. CORS를 사용하는 요청 [XMLHttpRequest](https://developer.mozilla.org/ko/docs/Web/API/XMLHttpRequest)와 Fetch API 호출 웹 폰트(CSS 내 @font-face에서 교차 도메인 폰트 사용 시) WebGL 텍스쳐 [drawImage()](https://developer.mozilla.org/ko/docs/Web/API/CanvasRenderingContext2D/drawImage)를 사용해 캔버스에 그린 이미지/비디오 프레임 이미지로부터 추출하는 CSS Shapes Simple 요청과 Non-simple 요청의 차이Simple 요청의 경우 CORS preflight 요청을 보내지 않음. Simple에 해당하는 요청의 조건은 다음과 같음. GET, HEAD, POST 메서드인 경우 Content-Type이 다음과 같아야함. application/x-www-form-urlencoded multipart/form-data text/plain 사용자 정의 HTTP 헤더가 없어야함. Preflight Requests위의 Simple 요청과 달리 OPTIONS 메서드를 통해 다른 오리진으로 요청이 가능한지 미리 확인함. 이 때 Access-Control-Request-Method 헤더에 실제 요청 시 메서드를, Access-Control-Request-Headers 헤더에 실제 요청 시 함께 전송될 사용자 정의 헤더를 명시해 서버에 알려줌. 그러면 서버는 이를 참고해 요청을 수락할 지 결정. Referencehttps://developer.mozilla.org/en-US/docs/Glossary/Origin https://ko.javascript.info/fetch-crossorigin https://developer.mozilla.org/ko/docs/Web/HTTP/CORS https://ko.wikipedia.org/wiki/교차출처리소스_공유#cite_note-2","link":"/2020/11/12/CORS-Cross-Origin-Resource-Sharing/"}],"tags":[{"name":"Etc.","slug":"Etc","link":"/tags/Etc/"},{"name":"Internet","slug":"Internet","link":"/tags/Internet/"},{"name":"URL","slug":"URL","link":"/tags/URL/"},{"name":"Program","slug":"Program","link":"/tags/Program/"},{"name":"Word","slug":"Word","link":"/tags/Word/"},{"name":"Meaning","slug":"Meaning","link":"/tags/Meaning/"},{"name":"scala","slug":"scala","link":"/tags/scala/"},{"name":"sbt","slug":"sbt","link":"/tags/sbt/"},{"name":"dependency","slug":"dependency","link":"/tags/dependency/"},{"name":"project","slug":"project","link":"/tags/project/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"type","slug":"type","link":"/tags/type/"},{"name":"memory","slug":"memory","link":"/tags/memory/"},{"name":"entity","slug":"entity","link":"/tags/entity/"},{"name":"value_object","slug":"value-object","link":"/tags/value-object/"},{"name":"vo","slug":"vo","link":"/tags/vo/"},{"name":"개체","slug":"개체","link":"/tags/%EA%B0%9C%EC%B2%B4/"},{"name":"값객체","slug":"값객체","link":"/tags/%EA%B0%92%EA%B0%9D%EC%B2%B4/"},{"name":"보일러 플레이트","slug":"보일러-플레이트","link":"/tags/%EB%B3%B4%EC%9D%BC%EB%9F%AC-%ED%94%8C%EB%A0%88%EC%9D%B4%ED%8A%B8/"},{"name":"boilerplate","slug":"boilerplate","link":"/tags/boilerplate/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"pojo","slug":"pojo","link":"/tags/pojo/"},{"name":"terminology","slug":"terminology","link":"/tags/terminology/"},{"name":"martinfowler","slug":"martinfowler","link":"/tags/martinfowler/"},{"name":"용어","slug":"용어","link":"/tags/%EC%9A%A9%EC%96%B4/"},{"name":"자바","slug":"자바","link":"/tags/%EC%9E%90%EB%B0%94/"},{"name":"포조","slug":"포조","link":"/tags/%ED%8F%AC%EC%A1%B0/"},{"name":"마틴 파울러","slug":"마틴-파울러","link":"/tags/%EB%A7%88%ED%8B%B4-%ED%8C%8C%EC%9A%B8%EB%9F%AC/"},{"name":"스타트업","slug":"스타트업","link":"/tags/%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85/"},{"name":"고객","slug":"고객","link":"/tags/%EA%B3%A0%EA%B0%9D/"},{"name":"문제","slug":"문제","link":"/tags/%EB%AC%B8%EC%A0%9C/"},{"name":"해결책","slug":"해결책","link":"/tags/%ED%95%B4%EA%B2%B0%EC%B1%85/"},{"name":"startup","slug":"startup","link":"/tags/startup/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"scrapy","slug":"scrapy","link":"/tags/scrapy/"},{"name":"crawling","slug":"crawling","link":"/tags/crawling/"},{"name":"image","slug":"image","link":"/tags/image/"},{"name":"파이썬","slug":"파이썬","link":"/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/"},{"name":"스크래피","slug":"스크래피","link":"/tags/%EC%8A%A4%ED%81%AC%EB%9E%98%ED%94%BC/"},{"name":"크롤링","slug":"크롤링","link":"/tags/%ED%81%AC%EB%A1%A4%EB%A7%81/"},{"name":"이미지","slug":"이미지","link":"/tags/%EC%9D%B4%EB%AF%B8%EC%A7%80/"},{"name":"생각","slug":"생각","link":"/tags/%EC%83%9D%EA%B0%81/"},{"name":"글쓰기","slug":"글쓰기","link":"/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"jekyll","slug":"jekyll","link":"/tags/jekyll/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"Tools","slug":"Tools","link":"/tags/Tools/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"nvm","slug":"nvm","link":"/tags/nvm/"},{"name":"fontawesome","slug":"fontawesome","link":"/tags/fontawesome/"},{"name":"helmet","slug":"helmet","link":"/tags/helmet/"},{"name":"http","slug":"http","link":"/tags/http/"},{"name":"security","slug":"security","link":"/tags/security/"},{"name":"mongoose","slug":"mongoose","link":"/tags/mongoose/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"svg","slug":"svg","link":"/tags/svg/"},{"name":"webpack","slug":"webpack","link":"/tags/webpack/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"babel","slug":"babel","link":"/tags/babel/"},{"name":"sass","slug":"sass","link":"/tags/sass/"},{"name":"passportjs","slug":"passportjs","link":"/tags/passportjs/"},{"name":"http_header","slug":"http-header","link":"/tags/http-header/"},{"name":"content_security_policy","slug":"content-security-policy","link":"/tags/content-security-policy/"},{"name":"csp","slug":"csp","link":"/tags/csp/"},{"name":"macos","slug":"macos","link":"/tags/macos/"},{"name":"cross-origin_resource_sharing","slug":"cross-origin-resource-sharing","link":"/tags/cross-origin-resource-sharing/"},{"name":"cors","slug":"cors","link":"/tags/cors/"}],"categories":[{"name":"TIL","slug":"TIL","link":"/categories/TIL/"},{"name":"tip","slug":"tip","link":"/categories/tip/"},{"name":"error","slug":"error","link":"/categories/error/"},{"name":"http","slug":"http","link":"/categories/http/"}]}